{"version":3,"file":"nano-date.js","sources":["../node_modules/core-decorators/es/lazy-initialize.js","../node_modules/core-decorators/es/private/utils.js","../node_modules/core-decorators/es/override.js","../node_modules/core-decorators/es/deprecate.js","../node_modules/core-decorators/es/autobind.js","../node_modules/core-decorators/es/decorate.js","../node_modules/map-or-similar/src/similar.js","../node_modules/memoizerific/src/memoizerific.js","../src/index.js","../node_modules/bignumber.js/bignumber.js","../node_modules/core-decorators/es/time.js","../node_modules/core-decorators/es/profile.js","../node_modules/map-or-similar/src/map-or-similar.js"],"sourcesContent":["import { decorate, createDefaultSetter } from './private/utils';\nvar defineProperty = Object.defineProperty;\n\n\nfunction handleDescriptor(target, key, descriptor) {\n  var configurable = descriptor.configurable,\n      enumerable = descriptor.enumerable,\n      initializer = descriptor.initializer,\n      value = descriptor.value;\n\n  return {\n    configurable: configurable,\n    enumerable: enumerable,\n\n    get: function get() {\n      // This happens if someone accesses the\n      // property directly on the prototype\n      if (this === target) {\n        return;\n      }\n\n      var ret = initializer ? initializer.call(this) : value;\n\n      defineProperty(this, key, {\n        configurable: configurable,\n        enumerable: enumerable,\n        writable: true,\n        value: ret\n      });\n\n      return ret;\n    },\n\n\n    set: createDefaultSetter(key)\n  };\n}\n\nexport default function lazyInitialize() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;\n\nfunction _initDefineProp(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nfunction _initializerWarningHelper(descriptor, context) {\n  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');\n}\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport lazyInitialize from '../lazy-initialize';\n\nvar defineProperty = Object.defineProperty,\n    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,\n    getOwnPropertyNames = Object.getOwnPropertyNames,\n    getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\n\nexport function isDescriptor(desc) {\n  if (!desc || !desc.hasOwnProperty) {\n    return false;\n  }\n\n  var keys = ['value', 'initializer', 'get', 'set'];\n\n  for (var i = 0, l = keys.length; i < l; i++) {\n    if (desc.hasOwnProperty(keys[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function decorate(handleDescriptor, entryArgs) {\n  if (isDescriptor(entryArgs[entryArgs.length - 1])) {\n    return handleDescriptor.apply(undefined, _toConsumableArray(entryArgs).concat([[]]));\n  } else {\n    return function () {\n      return handleDescriptor.apply(undefined, _toConsumableArray(Array.prototype.slice.call(arguments)).concat([entryArgs]));\n    };\n  }\n}\n\nvar Meta = (_class = function Meta() {\n  _classCallCheck(this, Meta);\n\n  _initDefineProp(this, 'debounceTimeoutIds', _descriptor, this);\n\n  _initDefineProp(this, 'throttleTimeoutIds', _descriptor2, this);\n\n  _initDefineProp(this, 'throttlePreviousTimestamps', _descriptor3, this);\n\n  _initDefineProp(this, 'throttleTrailingArgs', _descriptor4, this);\n\n  _initDefineProp(this, 'profileLastRan', _descriptor5, this);\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'debounceTimeoutIds', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'throttleTimeoutIds', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'throttlePreviousTimestamps', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'throttleTrailingArgs', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'profileLastRan', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return null;\n  }\n})), _class);\n\n\nvar META_KEY = typeof Symbol === 'function' ? Symbol('__core_decorators__') : '__core_decorators__';\n\nexport function metaFor(obj) {\n  if (obj.hasOwnProperty(META_KEY) === false) {\n    defineProperty(obj, META_KEY, {\n      // Defaults: NOT enumerable, configurable, or writable\n      value: new Meta()\n    });\n  }\n\n  return obj[META_KEY];\n}\n\nexport var getOwnKeys = getOwnPropertySymbols ? function (object) {\n  return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));\n} : getOwnPropertyNames;\n\nexport function getOwnPropertyDescriptors(obj) {\n  var descs = {};\n\n  getOwnKeys(obj).forEach(function (key) {\n    return descs[key] = getOwnPropertyDescriptor(obj, key);\n  });\n\n  return descs;\n}\n\nexport function createDefaultSetter(key) {\n  return function set(newValue) {\n    Object.defineProperty(this, key, {\n      configurable: true,\n      writable: true,\n      // IS enumerable when reassigned by the outside word\n      enumerable: true,\n      value: newValue\n    });\n\n    return newValue;\n  };\n}\n\nexport function bind(fn, context) {\n  if (fn.bind) {\n    return fn.bind(context);\n  } else {\n    return function __autobind__() {\n      return fn.apply(context, arguments);\n    };\n  }\n}\n\nexport var warn = function () {\n  if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) !== 'object' || !console || typeof console.warn !== 'function') {\n    return function () {};\n  } else {\n    return bind(console.warn, console);\n  }\n}();\n\nvar seenDeprecations = {};\nexport function internalDeprecation(msg) {\n  if (seenDeprecations[msg] !== true) {\n    seenDeprecations[msg] = true;\n    warn('DEPRECATION: ' + msg);\n  }\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { decorate } from './private/utils';\n\nvar GENERIC_FUNCTION_ERROR = '{child} does not properly override {parent}';\nvar FUNCTION_REGEXP = /^function ([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?(\\([^\\)]*\\))[\\s\\S]+$/;\n\nvar SyntaxErrorReporter = function () {\n  _createClass(SyntaxErrorReporter, [{\n    key: '_getTopic',\n    value: function _getTopic(descriptor) {\n      if (descriptor === undefined) {\n        return null;\n      }\n\n      if ('value' in descriptor) {\n        return descriptor.value;\n      }\n\n      if ('get' in descriptor) {\n        return descriptor.get;\n      }\n\n      if ('set' in descriptor) {\n        return descriptor.set;\n      }\n    }\n  }, {\n    key: '_extractTopicSignature',\n    value: function _extractTopicSignature(topic) {\n      switch (typeof topic === 'undefined' ? 'undefined' : _typeof(topic)) {\n        case 'function':\n          return this._extractFunctionSignature(topic);\n        default:\n          return this.key;\n      }\n    }\n  }, {\n    key: '_extractFunctionSignature',\n    value: function _extractFunctionSignature(fn) {\n      var _this = this;\n\n      return fn.toString().replace(FUNCTION_REGEXP, function (match) {\n        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n        var params = arguments[2];\n        return name + params;\n      });\n    }\n  }, {\n    key: 'key',\n    get: function get() {\n      return this.childDescriptor.key;\n    }\n  }, {\n    key: 'parentNotation',\n    get: function get() {\n      return this.parentKlass.constructor.name + '#' + this.parentPropertySignature;\n    }\n  }, {\n    key: 'childNotation',\n    get: function get() {\n      return this.childKlass.constructor.name + '#' + this.childPropertySignature;\n    }\n  }, {\n    key: 'parentTopic',\n    get: function get() {\n      return this._getTopic(this.parentDescriptor);\n    }\n  }, {\n    key: 'childTopic',\n    get: function get() {\n      return this._getTopic(this.childDescriptor);\n    }\n  }, {\n    key: 'parentPropertySignature',\n    get: function get() {\n      return this._extractTopicSignature(this.parentTopic);\n    }\n  }, {\n    key: 'childPropertySignature',\n    get: function get() {\n      return this._extractTopicSignature(this.childTopic);\n    }\n  }]);\n\n  function SyntaxErrorReporter(parentKlass, childKlass, parentDescriptor, childDescriptor) {\n    _classCallCheck(this, SyntaxErrorReporter);\n\n    this.parentKlass = parentKlass;\n    this.childKlass = childKlass;\n    this.parentDescriptor = parentDescriptor;\n    this.childDescriptor = childDescriptor;\n  }\n\n  _createClass(SyntaxErrorReporter, [{\n    key: 'assert',\n    value: function assert(condition) {\n      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (condition !== true) {\n        this.error(GENERIC_FUNCTION_ERROR + msg);\n      }\n    }\n  }, {\n    key: 'error',\n    value: function error(msg) {\n      var _this2 = this;\n\n      msg = msg\n      // Replace lazily, because they actually might not\n      // be available in all cases\n      .replace('{parent}', function (m) {\n        return _this2.parentNotation;\n      }).replace('{child}', function (m) {\n        return _this2.childNotation;\n      });\n      throw new SyntaxError(msg);\n    }\n  }]);\n\n  return SyntaxErrorReporter;\n}();\n\nfunction getDescriptorType(descriptor) {\n  if (descriptor.hasOwnProperty('value')) {\n    return 'data';\n  }\n\n  if (descriptor.hasOwnProperty('get') || descriptor.hasOwnProperty('set')) {\n    return 'accessor';\n  }\n\n  // If none of them exist, browsers treat it as\n  // a data descriptor with a value of `undefined`\n  return 'data';\n}\n\nfunction checkFunctionSignatures(parent, child, reporter) {\n  reporter.assert(parent.length === child.length);\n}\n\nfunction checkDataDescriptors(parent, child, reporter) {\n  var parentValueType = _typeof(parent.value);\n  var childValueType = _typeof(child.value);\n\n  if (parentValueType === 'undefined' && childValueType === 'undefined') {\n    // class properties can be any expression, which isn't ran until the\n    // the instance is created, so we can't reliably get type information\n    // for them yet (per spec). Perhaps when Babel includes flow-type info\n    // in runtime? Tried regex solutions, but super hacky and only feasible\n    // on primitives, which is confusing for usage...\n    reporter.error('descriptor values are both undefined. (class properties are are not currently supported)\\'');\n  }\n\n  if (parentValueType !== childValueType) {\n    var isFunctionOverUndefined = childValueType === 'function' && parentValueType === undefined;\n    // Even though we don't support class properties, this\n    // will still handle more than just functions, just in case.\n    // Shadowing an undefined value is an error if the inherited\n    // value was undefined (usually a class property, not a method)\n    if (isFunctionOverUndefined || parentValueType !== undefined) {\n      reporter.error('value types do not match. {parent} is \"' + parentValueType + '\", {child} is \"' + childValueType + '\"');\n    }\n  }\n\n  // Switch, in preparation for supporting more types\n  switch (childValueType) {\n    case 'function':\n      checkFunctionSignatures(parent.value, child.value, reporter);\n      break;\n\n    default:\n      reporter.error('Unexpected error. Please file a bug with: {parent} is \"' + parentValueType + '\", {child} is \"' + childValueType + '\"');\n      break;\n  }\n}\n\nfunction checkAccessorDescriptors(parent, child, reporter) {\n  var parentHasGetter = typeof parent.get === 'function';\n  var childHasGetter = typeof child.get === 'function';\n  var parentHasSetter = typeof parent.set === 'function';\n  var childHasSetter = typeof child.set === 'function';\n\n  if (parentHasGetter || childHasGetter) {\n    if (!parentHasGetter && parentHasSetter) {\n      reporter.error('{parent} is setter but {child} is getter');\n    }\n\n    if (!childHasGetter && childHasSetter) {\n      reporter.error('{parent} is getter but {child} is setter');\n    }\n\n    checkFunctionSignatures(parent.get, child.get, reporter);\n  }\n\n  if (parentHasSetter || childHasSetter) {\n    if (!parentHasSetter && parentHasGetter) {\n      reporter.error('{parent} is getter but {child} is setter');\n    }\n\n    if (!childHasSetter && childHasGetter) {\n      reporter.error('{parent} is setter but {child} is getter');\n    }\n\n    checkFunctionSignatures(parent.set, child.set, reporter);\n  }\n}\n\nfunction checkDescriptors(parent, child, reporter) {\n  var parentType = getDescriptorType(parent);\n  var childType = getDescriptorType(child);\n\n  if (parentType !== childType) {\n    reporter.error('descriptor types do not match. {parent} is \"' + parentType + '\", {child} is \"' + childType + '\"');\n  }\n\n  switch (childType) {\n    case 'data':\n      checkDataDescriptors(parent, child, reporter);\n      break;\n\n    case 'accessor':\n      checkAccessorDescriptors(parent, child, reporter);\n      break;\n  }\n}\n\nvar suggestionTransforms = [function (key) {\n  return key.toLowerCase();\n}, function (key) {\n  return key.toUpperCase();\n}, function (key) {\n  return key + 's';\n}, function (key) {\n  return key.slice(0, -1);\n}, function (key) {\n  return key.slice(1, key.length);\n}];\n\nfunction findPossibleAlternatives(superKlass, key) {\n  for (var i = 0, l = suggestionTransforms.length; i < l; i++) {\n    var fn = suggestionTransforms[i];\n    var suggestion = fn(key);\n\n    if (suggestion in superKlass) {\n      return suggestion;\n    }\n  }\n\n  return null;\n}\n\nfunction handleDescriptor(target, key, descriptor) {\n  descriptor.key = key;\n  var superKlass = Object.getPrototypeOf(target);\n  var superDescriptor = Object.getOwnPropertyDescriptor(superKlass, key);\n  var reporter = new SyntaxErrorReporter(superKlass, target, superDescriptor, descriptor);\n\n  if (superDescriptor === undefined) {\n    var suggestedKey = findPossibleAlternatives(superKlass, key);\n    var suggestion = suggestedKey ? '\\n\\n  Did you mean \"' + suggestedKey + '\"?' : '';\n    reporter.error('No descriptor matching {child} was found on the prototype chain.' + suggestion);\n  }\n\n  checkDescriptors(superDescriptor, descriptor, reporter);\n\n  return descriptor;\n}\n\nexport default function override() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport { decorate, warn } from './private/utils';\n\nvar DEFAULT_MSG = 'This function will be removed in future versions.';\n\nfunction handleDescriptor(target, key, descriptor, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      _ref2$ = _ref2[0],\n      msg = _ref2$ === undefined ? DEFAULT_MSG : _ref2$,\n      _ref2$2 = _ref2[1],\n      options = _ref2$2 === undefined ? {} : _ref2$2;\n\n  if (typeof descriptor.value !== 'function') {\n    throw new SyntaxError('Only functions can be marked as deprecated');\n  }\n\n  var methodSignature = target.constructor.name + '#' + key;\n\n  if (options.url) {\n    msg += '\\n\\n    See ' + options.url + ' for more details.\\n\\n';\n  }\n\n  return _extends({}, descriptor, {\n    value: function deprecationWrapper() {\n      warn('DEPRECATION ' + methodSignature + ': ' + msg);\n      return descriptor.value.apply(this, arguments);\n    }\n  });\n}\n\nexport default function deprecate() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport { decorate, createDefaultSetter, getOwnPropertyDescriptors, getOwnKeys, bind } from './private/utils';\nvar defineProperty = Object.defineProperty,\n    getPrototypeOf = Object.getPrototypeOf;\n\n\nvar mapStore = void 0;\n\nfunction getBoundSuper(obj, fn) {\n  if (typeof WeakMap === 'undefined') {\n    throw new Error('Using @autobind on ' + fn.name + '() requires WeakMap support due to its use of super.' + fn.name + '()\\n      See https://github.com/jayphelps/core-decorators.js/issues/20');\n  }\n\n  if (!mapStore) {\n    mapStore = new WeakMap();\n  }\n\n  if (mapStore.has(obj) === false) {\n    mapStore.set(obj, new WeakMap());\n  }\n\n  var superStore = mapStore.get(obj);\n\n  if (superStore.has(fn) === false) {\n    superStore.set(fn, bind(fn, obj));\n  }\n\n  return superStore.get(fn);\n}\n\nfunction autobindClass(klass) {\n  var descs = getOwnPropertyDescriptors(klass.prototype);\n  var keys = getOwnKeys(descs);\n\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    var desc = descs[key];\n\n    if (typeof desc.value !== 'function' || key === 'constructor') {\n      continue;\n    }\n\n    defineProperty(klass.prototype, key, autobindMethod(klass.prototype, key, desc));\n  }\n}\n\nfunction autobindMethod(target, key, _ref) {\n  var fn = _ref.value,\n      configurable = _ref.configurable,\n      enumerable = _ref.enumerable;\n\n  if (typeof fn !== 'function') {\n    throw new SyntaxError('@autobind can only be used on functions, not: ' + fn);\n  }\n\n  var constructor = target.constructor;\n\n\n  return {\n    configurable: configurable,\n    enumerable: enumerable,\n\n    get: function get() {\n      // Class.prototype.key lookup\n      // Someone accesses the property directly on the prototype on which it is\n      // actually defined on, i.e. Class.prototype.hasOwnProperty(key)\n      if (this === target) {\n        return fn;\n      }\n\n      // Class.prototype.key lookup\n      // Someone accesses the property directly on a prototype but it was found\n      // up the chain, not defined directly on it\n      // i.e. Class.prototype.hasOwnProperty(key) == false && key in Class.prototype\n      if (this.constructor !== constructor && getPrototypeOf(this).constructor === constructor) {\n        return fn;\n      }\n\n      // Autobound method calling super.sameMethod() which is also autobound and so on.\n      if (this.constructor !== constructor && key in this.constructor.prototype) {\n        return getBoundSuper(this, fn);\n      }\n\n      var boundFn = bind(fn, this);\n\n      defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        // NOT enumerable when it's a bound method\n        enumerable: false,\n        value: boundFn\n      });\n\n      return boundFn;\n    },\n\n    set: createDefaultSetter(key)\n  };\n}\n\nfunction handle(args) {\n  if (args.length === 1) {\n    return autobindClass.apply(undefined, _toConsumableArray(args));\n  } else {\n    return autobindMethod.apply(undefined, _toConsumableArray(args));\n  }\n}\n\nexport default function autobind() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length === 0) {\n    return function () {\n      return handle(arguments);\n    };\n  } else {\n    return handle(args);\n  }\n}","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nimport { decorate as _decorate, createDefaultSetter } from './private/utils';\nvar defineProperty = Object.defineProperty;\n\n\nfunction handleDescriptor(target, key, descriptor, _ref) {\n  var _ref2 = _toArray(_ref),\n      decorator = _ref2[0],\n      args = _ref2.slice(1);\n\n  var configurable = descriptor.configurable,\n      enumerable = descriptor.enumerable,\n      writable = descriptor.writable;\n\n  var originalGet = descriptor.get;\n  var originalSet = descriptor.set;\n  var originalValue = descriptor.value;\n  var isGetter = !!originalGet;\n\n  return {\n    configurable: configurable,\n    enumerable: enumerable,\n    get: function get() {\n      var fn = isGetter ? originalGet.call(this) : originalValue;\n      var value = decorator.call.apply(decorator, [this, fn].concat(_toConsumableArray(args)));\n\n      if (isGetter) {\n        return value;\n      } else {\n        var desc = {\n          configurable: configurable,\n          enumerable: enumerable\n        };\n\n        desc.value = value;\n        desc.writable = writable;\n\n        defineProperty(this, key, desc);\n\n        return value;\n      }\n    },\n\n    set: isGetter ? originalSet : createDefaultSetter()\n  };\n}\n\nexport default function decorate() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _decorate(handleDescriptor, args);\n}","function Similar() {\n\tthis.list = [];\n\tthis.lastItem = undefined;\n\tthis.size = 0;\n\n\treturn this;\n}\n\nSimilar.prototype.get = function(key) {\n\tvar index;\n\n\tif (this.lastItem && this.isEqual(this.lastItem.key, key)) {\n\t\treturn this.lastItem.val;\n\t}\n\n\tindex = this.indexOf(key);\n\tif (index >= 0) {\n\t\tthis.lastItem = this.list[index];\n\t\treturn this.list[index].val;\n\t}\n\n\treturn undefined;\n};\n\nSimilar.prototype.set = function(key, val) {\n\tvar index;\n\n\tif (this.lastItem && this.isEqual(this.lastItem.key, key)) {\n\t\tthis.lastItem.val = val;\n\t\treturn this;\n\t}\n\n\tindex = this.indexOf(key);\n\tif (index >= 0) {\n\t\tthis.lastItem = this.list[index];\n\t\tthis.list[index].val = val;\n\t\treturn this;\n\t}\n\n\tthis.lastItem = { key: key, val: val };\n\tthis.list.push(this.lastItem);\n\tthis.size++;\n\n\treturn this;\n};\n\nSimilar.prototype.delete = function(key) {\n\tvar index;\n\n\tif (this.lastItem && this.isEqual(this.lastItem.key, key)) {\n\t\tthis.lastItem = undefined;\n\t}\n\n\tindex = this.indexOf(key);\n\tif (index >= 0) {\n\t\tthis.size--;\n\t\treturn this.list.splice(index, 1)[0];\n\t}\n\n\treturn undefined;\n};\n\n\n// important that has() doesn't use get() in case an existing key has a falsy value, in which case has() would return false\nSimilar.prototype.has = function(key) {\n\tvar index;\n\n\tif (this.lastItem && this.isEqual(this.lastItem.key, key)) {\n\t\treturn true;\n\t}\n\n\tindex = this.indexOf(key);\n\tif (index >= 0) {\n\t\tthis.lastItem = this.list[index];\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nSimilar.prototype.forEach = function(callback, thisArg) {\n\tvar i;\n\tfor (i = 0; i < this.size; i++) {\n\t\tcallback.call(thisArg || this, this.list[i].val, this.list[i].key, this);\n\t}\n};\n\nSimilar.prototype.indexOf = function(key) {\n\tvar i;\n\tfor (i = 0; i < this.size; i++) {\n\t\tif (this.isEqual(this.list[i].key, key)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n\n// check if the numbers are equal, or whether they are both precisely NaN (isNaN returns true for all non-numbers)\nSimilar.prototype.isEqual = function(val1, val2) {\n\treturn val1 === val2 || (val1 !== val1 && val2 !== val2);\n};\n\nmodule.exports = Similar;","var MapOrSimilar = require('map-or-similar');\n\nmodule.exports = function (limit) {\n\tvar cache = new MapOrSimilar(process.env.FORCE_SIMILAR_INSTEAD_OF_MAP === 'true'),\n\t\tlru = [];\n\n\treturn function (fn) {\n\t\tvar memoizerific = function () {\n\t\t\tvar currentCache = cache,\n\t\t\t\tnewMap,\n\t\t\t\tfnResult,\n\t\t\t\targsLengthMinusOne = arguments.length - 1,\n\t\t\t\tlruPath = Array(argsLengthMinusOne + 1),\n\t\t\t\tisMemoized = true,\n\t\t\t\ti;\n\n\t\t\tif ((memoizerific.numArgs || memoizerific.numArgs === 0) && memoizerific.numArgs !== argsLengthMinusOne + 1) {\n\t\t\t\tthrow new Error('Memoizerific functions should always be called with the same number of arguments');\n\t\t\t}\n\n\t\t\t// loop through each argument to traverse the map tree\n\t\t\tfor (i = 0; i < argsLengthMinusOne; i++) {\n\t\t\t\tlruPath[i] = {\n\t\t\t\t\tcacheItem: currentCache,\n\t\t\t\t\targ: arguments[i]\n\t\t\t\t};\n\n\t\t\t\t// climb through the hierarchical map tree until the second-last argument has been found, or an argument is missing.\n\t\t\t\t// if all arguments up to the second-last have been found, this will potentially be a cache hit (determined later)\n\t\t\t\tif (currentCache.has(arguments[i])) {\n\t\t\t\t\tcurrentCache = currentCache.get(arguments[i]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tisMemoized = false;\n\n\t\t\t\t// make maps until last value\n\t\t\t\tnewMap = new MapOrSimilar(process.env.FORCE_SIMILAR_INSTEAD_OF_MAP === 'true');\n\t\t\t\tcurrentCache.set(arguments[i], newMap);\n\t\t\t\tcurrentCache = newMap;\n\t\t\t}\n\n\t\t\t// we are at the last arg, check if it is really memoized\n\t\t\tif (isMemoized) {\n\t\t\t\tif (currentCache.has(arguments[argsLengthMinusOne])) {\n\t\t\t\t\tfnResult = currentCache.get(arguments[argsLengthMinusOne]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tisMemoized = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if the result wasn't memoized, compute it and cache it\n\t\t\tif (!isMemoized) {\n\t\t\t\tfnResult = fn.apply(null, arguments);\n\t\t\t\tcurrentCache.set(arguments[argsLengthMinusOne], fnResult);\n\t\t\t}\n\n\t\t\t// if there is a cache limit, purge any extra results\n\t\t\tif (limit > 0) {\n\t\t\t\tlruPath[argsLengthMinusOne] = {\n\t\t\t\t\tcacheItem: currentCache,\n\t\t\t\t\targ: arguments[argsLengthMinusOne]\n\t\t\t\t};\n\n\t\t\t\tif (isMemoized) {\n\t\t\t\t\tmoveToMostRecentLru(lru, lruPath);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlru.push(lruPath);\n\t\t\t\t}\n\n\t\t\t\tif (lru.length > limit) {\n\t\t\t\t\tremoveCachedResult(lru.shift());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmemoizerific.wasMemoized = isMemoized;\n\t\t\tmemoizerific.numArgs = argsLengthMinusOne + 1;\n\n\t\t\treturn fnResult;\n\t\t};\n\n\t\tmemoizerific.limit = limit;\n\t\tmemoizerific.wasMemoized = false;\n\t\tmemoizerific.cache = cache;\n\t\tmemoizerific.lru = lru;\n\n\t\treturn memoizerific;\n\t};\n};\n\n// move current args to most recent position\nfunction moveToMostRecentLru(lru, lruPath) {\n\tvar lruLen = lru.length,\n\t\tlruPathLen = lruPath.length,\n\t\tisMatch,\n\t\ti, ii;\n\n\tfor (i = 0; i < lruLen; i++) {\n\t\tisMatch = true;\n\t\tfor (ii = 0; ii < lruPathLen; ii++) {\n\t\t\tif (!isEqual(lru[i][ii].arg, lruPath[ii].arg)) {\n\t\t\t\tisMatch = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isMatch) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlru.push(lru.splice(i, 1)[0]);\n}\n\n// remove least recently used cache item and all dead branches\nfunction removeCachedResult(removedLru) {\n\tvar removedLruLen = removedLru.length,\n\t\tcurrentLru = removedLru[removedLruLen - 1],\n\t\ttmp,\n\t\ti;\n\n\tcurrentLru.cacheItem.delete(currentLru.arg);\n\n\t// walk down the tree removing dead branches (size 0) along the way\n\tfor (i = removedLruLen - 2; i >= 0; i--) {\n\t\tcurrentLru = removedLru[i];\n\t\ttmp = currentLru.cacheItem.get(currentLru.arg);\n\n\t\tif (!tmp || !tmp.size) {\n\t\t\tcurrentLru.cacheItem.delete(currentLru.arg);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n// check if the numbers are equal, or whether they are both precisely NaN (isNaN returns true for all non-numbers)\nfunction isEqual(val1, val2) {\n\treturn val1 === val2 || (val1 !== val1 && val2 !== val2);\n}","import BigNumber from 'bignumber.js';\nimport { autobind, decorate, deprecate } from 'core-decorators';\nimport memoize from 'memoizerific';\n\n// Cache original 'Date' class. User may set window.Date = NanoDate;\nif (typeof window === 'undefined') {\n  /* istanbul ignore next */\n  var BaseDate = Date;\n} else {\n  var BaseDate = window.Date;\n}\n\nconst ISO_8601_FULL = /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/i;\n\nconst MILLI_TO_NANO_DIFF = 1000000;\nconst DIGETS_IN_NANO = 19;\nconst DIGETS_IN_MILLI = 13;\nconst MINIMUM_DIGETS = DIGETS_IN_NANO - DIGETS_IN_MILLI;\n\nconst YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLI = 'milli';\nconst MICRO = 'micro';\nconst NANO = 'nano';\n\nconst DAYS = {\n  0: 31,\n  1: 28,\n  2: 31,\n  3: 30,\n  4: 31,\n  5: 30,\n  6: 31,\n  7: 31,\n  8: 30,\n  9: 31,\n  10: 30,\n  11: 31\n};\n\nconst DAYS_LEAP_YEAR = {\n  0: 31,\n  1: 29,\n  2: 31,\n  3: 30,\n  4: 31,\n  5: 30,\n  6: 31,\n  7: 31,\n  8: 30,\n  9: 31,\n  10: 30,\n  11: 31\n};\n\nfunction pad(num) {\n  return addZeros(num, num < 100 ? (num < 10 ? 2 : 1) : 0, true);\n}\n\nfunction padEndTo(num, toLen) {\n  return addZeros(num, 9 - `${num}`.length);\n}\n\nfunction addZeros(str, count = 0, front = false) {\n  if (count === 0) {\n    return str;\n  }\n  return addZeros(`${front ? '0' : ''}${str}${!front ? '0' : ''}`, count - 1, front);\n}\n\nfunction toNano(num) {\n  let str = `${num}`;\n  if (str.length <= DIGETS_IN_NANO) {\n    if (str.indexOf('.') > -1) {\n      str = num.toFixed(3);\n      return new BigNumber(str.replace('.', '') + '000');\n    }\n    return new BigNumber(str);\n  }\n  return new BigNumber(str.slice(0, DIGETS_IN_NANO));\n}\n\nfunction onlyDigits(num) {\n  return /^(-)?\\d+$/.test(`${num}`);\n}\n\nfunction leapYear(yearBase) {\n  const year = yearBase.toNumber();\n  return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n}\n\nfunction daysForYear(year) {\n  return leapYear(year) ? 366 : 365;\n}\n\nfunction daysForMonth(year, month) {\n  const days = leapYear(year) ? DAYS_LEAP_YEAR : DAYS;\n  return days[month.toNumber()];\n}\n\nfunction handleNotAnInteger(items, funcName, names, index = 0) {\n  const item = items[index];\n  const name = names[index];\n  if (typeof item !== 'number' || !onlyDigits(item)) {\n    throw new Error(`Parameter ${name} value for ${funcName} has to be an integer.`);\n  } else if (names.length > index && notUndefined(items[index + 1])) {\n    handleNotAnInteger(items, funcName, names, index + 1);\n  }\n}\n\nfunction notUndefined(item) {\n  return typeof item !== 'undefined';\n}\n\nfunction buildSetFunction(scope, name, argumentNames, getMethod, valueKey, moreVarsFunc = () => {}, utc = false) {\n  function setFunction(...args) {\n    handleNotAnInteger(args, name, argumentNames);\n    const currentValue = getMethod();\n    if (currentValue !== args[0]) {\n      if (currentValue < args[0]) {\n        const v = scope._getValue.call(scope, scope, valueKey, args[0] - currentValue, utc);\n        scope._full = scope._full.plus(v).truncated();\n      } else {\n        const v = scope._getValue.call(scope, scope, valueKey, currentValue - args[0], utc);\n        scope._full = scope._full.minus(v).truncated();\n      }\n\n      if (args.length === 1 || (args.length > 1 && !notUndefined(args[1]))) {\n        scope._setupFunctions.call(scope);\n      }\n    }\n\n    if (args.length > 1 && notUndefined(args[1])) {\n      args.shift();\n      moreVarsFunc.apply(scope, args);\n    }\n\n    return getMethod();\n  }\n\n  Object.defineProperty(setFunction, 'name', { value: name, writable: false });\n\n  return setFunction.bind(scope);\n}\n\nconst passThroughMethods = [\n  'getFullYear',\n  'getYear',\n  'getMonth',\n  'getDate',\n  'getDay',\n  'getHours',\n  'getMinutes',\n  'getSeconds',\n  'getMilliseconds',\n  'getUTCFullYear',\n  'getUTCYear',\n  'getUTCMonth',\n  'getUTCDate',\n  'getUTCDay',\n  'getUTCHours',\n  'getUTCMinutes',\n  'getUTCSeconds',\n  'getUTCMilliseconds',\n  'toDateString',\n  'toLocaleDateString',\n  'toLocaleString',\n  'toTimeString',\n  'toLocaleTimeString',\n  'toISOString',\n  'getTimezoneOffset'\n];\n\n@autobind\nclass NanoDate {\n  constructor(a, b, c, d, e, f, g, h) {\n    if (typeof a === 'string') {\n      this._full = onlyDigits(a) ? toNano(a) : toNano(new BaseDate(a).valueOf() * MILLI_TO_NANO_DIFF);\n    } else if (arguments.length === 0) {\n      this._full = toNano(new BaseDate().valueOf() * MILLI_TO_NANO_DIFF);\n    } else if (arguments.length === 1) {\n      if (a instanceof NanoDate) {\n        this._full = a._full;\n      } else if (a instanceof BaseDate) {\n        this._full = toNano(a.valueOf() * MILLI_TO_NANO_DIFF);\n      } else if (typeof a === 'number') {\n        let multi = MILLI_TO_NANO_DIFF;\n        if (`${a}`.indexOf('.') > -1) {\n          multi = 1;\n        }\n        this._full = toNano(a * multi);\n      } else {\n        throw Error('Input not of any type that can be converted to a date');\n      }\n    } else {\n      let date;\n      if (typeof a === 'boolean') {\n        date = BaseDate.UTC(b, c || 0, d || 0, e || 0, f || 0, g || 0, h || 0);\n      } else {\n        date = new BaseDate(a, b, c || 0, d || 0, e || 0, f || 0, g || 0);\n      }\n      this._full = toNano(date.valueOf() * MILLI_TO_NANO_DIFF);\n    }\n\n    this._setupFunctions();\n\n    if (typeof a === 'string' && ISO_8601_FULL.test(a) && a.indexOf('.') > -1) {\n      const match = a.match(ISO_8601_FULL);\n      if (typeof match[1] !== 'undefined') {\n        const padded = padEndTo(match[1].replace('.', ''), 9);\n        let nanos = parseInt(padded, 10);\n\n        // set milliseconds\n        if (nanos > 0) {\n          this.setMilliseconds(Math.floor(nanos / MILLI_TO_NANO_DIFF));\n          nanos = nanos % MILLI_TO_NANO_DIFF;\n        }\n\n        // set microseconds\n        if (nanos > 0) {\n          this.setMicroseconds(Math.floor(nanos / 1000));\n          nanos = nanos % 1000;\n        }\n\n        // set nanoseconds\n        if (nanos > 0) {\n          this.setNanoseconds(Math.floor(nanos));\n        }\n      }\n    }\n  }\n\n  _setupFunctions() {\n    this._date = new BaseDate(this.valueOf());\n    passThroughMethods.forEach((name) => {\n      this[name] = (...args) => this._date[name](...args);\n    });\n\n    this._buildSetFunctions();\n  }\n\n  @decorate(memoize(250))\n  _getDaysBetween(a, b, func) {\n    if (a.eq(b)) { return new BigNumber(0); }\n    let days = new BigNumber(0);\n    const diff = a.lt(b) ? 1 : -1;\n    let start = new BigNumber(a);\n    while (!start.eq(b)) {\n      const val = func(start);\n      days = days.plus(val);\n      start = start.plus(diff);\n    }\n    return days.times(diff);\n  }\n\n  _getFullYear(utc) {\n    return utc ? this.getUTCFullYear() : this.getFullYear();\n  }\n\n  _getDate(utc) {\n    return utc ? this.getUTCDate() : this.getDate();\n  }\n\n  _getMonth(utc) {\n    return utc ? this.getUTCMonth() : this.getMonth();\n  }\n\n  _getDays(unit, utc = false) {\n    const currentYear = new BigNumber(this._getFullYear(utc));\n    let base = new BigNumber(unit);\n    let res = new BigNumber(this._getDate(utc)).minus(1);\n    if (unit >= 12) {\n      const years = base.dividedToIntegerBy(12);\n      const start = new BigNumber(currentYear);\n      const end = start.plus(years);\n      res = this._getDaysBetween(start, end, daysForYear);\n      base = base.plus(years.times(12).times(base.lessThan(0) ? 1 : -1));\n    }\n\n    const month = new BigNumber(this._getMonth(utc));\n    let diff = month.plus(base);\n    if (diff.greaterThan(11)) {\n      diff = month.minus(base);\n    }\n    // console.log('days between', res.toNumber(), diff.toNumber(), month.toNumber());\n    if (diff.lessThan(month)) {\n      return res.plus(this._getDaysBetween(diff, month, daysForMonth.bind(null, currentYear)));\n    }\n    return res.plus(this._getDaysBetween(month, diff, daysForMonth.bind(null, currentYear)));\n  }\n\n  @decorate(memoize(100))\n  _getValue(scope, type, unit, utc = false) {\n    const numUnit = new BigNumber(unit);\n    switch (type) {\n      case YEAR:\n        return scope._getValue(scope, MONTH, numUnit.times(12), utc);\n      case MONTH:\n        return scope._getValue(scope, DAY, scope._getDays(numUnit, utc), utc);\n      case DAY:\n        return scope._getValue(scope, HOUR, numUnit.times(24), utc);\n      case HOUR:\n        return scope._getValue(scope, MINUTE, numUnit.times(60), utc);\n      case MINUTE:\n        return scope._getValue(scope, SECOND, numUnit.times(60), utc);\n      case SECOND:\n        return scope._getValue(scope, MILLI, numUnit.times(1000), utc);\n      case MILLI:\n        return scope._getValue(scope, MICRO, numUnit.times(1000), utc);\n      case MICRO:\n        return scope._getValue(scope, NANO, numUnit.times(1000), utc);\n      case NANO:\n      default:\n        return numUnit;\n    }\n  }\n\n  static now() {\n    return (new NanoDate()).valueOf();\n  }\n\n  static parse(...args) {\n    return BaseDate.parse(...args);\n  }\n\n  static UTC(...args) {\n    return new NanoDate(true, ...args);\n  }\n\n  getTime() {\n    return this._full.toString();\n  }\n\n  valueOf() {\n    return this._full.dividedBy(MILLI_TO_NANO_DIFF).truncated().toNumber();\n  }\n\n  valueOfWithMicro() {\n    return parseFloat(`${this.valueOf()}.${pad(this.getMicroseconds())}`, 10);\n  }\n\n  valueOfWithNano() {\n    return `${this.valueOfWithMicro().toFixed(3)}${pad(this.getNanoseconds())}`;\n  }\n\n  getMicroseconds() {\n    return this._full\n      .minus(this.valueOf() * MILLI_TO_NANO_DIFF)\n      .dividedBy(1000)\n      .truncated()\n      .toNumber();\n  }\n\n  getUTCMicroseconds() {\n    return this.getMicroseconds();\n  }\n\n  getNanoseconds() {\n    return this._full\n      .minus(this.valueOf() * MILLI_TO_NANO_DIFF)\n      .minus(this.getMicroseconds() * 1000)\n      .truncated()\n      .toNumber();\n  }\n\n  getUTCNanoseconds() {\n    return this.getNanoseconds();\n  }\n\n  _buildSetFunctions() {\n    const build = buildSetFunction.bind(this, this);\n\n    this.setUTCNanoseconds = this.setNanoseconds = build(\n      'setNanoseconds',\n      ['nanosecond'],\n      this.getUTCNanoseconds,\n      NANO\n    );\n\n    this.setUTCMicroseconds = this.setMicroseconds = build(\n      'setMicoseconds',\n      ['microsecond', 'nanosecond'],\n      this.getUTCMicroseconds,\n      MICRO,\n      this.setUTCNanoseconds\n    );\n\n    this.setUTCMilliseconds = this.setMilliseconds = build(\n      'setMilliseconds',\n      ['millisecond', 'microsecond', 'nanosecond'],\n      this.getUTCMilliseconds,\n      MILLI,\n      this.setUTCMicroseconds\n    );\n\n    this.setUTCSeconds = build(\n      'setUTCSeconds',\n      ['second', 'millisecond', 'microsecond', 'nanosecond'],\n      this.getUTCSeconds,\n      SECOND,\n      this.setUTCMilliseconds,\n      true\n    );\n\n    this.setSeconds = build(\n      'setSeconds',\n      ['second', 'millisecond', 'microsecond', 'nanosecond'],\n      this.getSeconds,\n      SECOND,\n      this.setMilliseconds\n    );\n\n    this.setUTCMinutes = build(\n      'setUTCMinutes',\n      ['minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\n      this.getUTCMinutes,\n      MINUTE,\n      this.setUTCSeconds,\n      true\n    );\n\n    this.setMinutes = build(\n      'setMinutes',\n      ['minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\n      this.getMinutes,\n      MINUTE,\n      this.setSeconds\n    );\n\n    this.setUTCHours = build(\n      'setUTCHours',\n      ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\n      this.getUTCHours,\n      HOUR,\n      this.setUTCMinutes,\n      true\n    );\n\n    this.setHours = build(\n      'setHours',\n      ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\n      this.getHours,\n      HOUR,\n      this.setMinutes\n    );\n\n    this.setUTCDate = build(\n      'setUTCDate',\n      ['day'],\n      this.getUTCDate,\n      DAY,\n      () => {},\n      true\n    );\n\n    this.setDate = build(\n      'setDate',\n      ['day'],\n      this.getDate,\n      DAY\n    );\n\n    this.setUTCMonth = build(\n      'setUTCMonth',\n      ['month', 'day'],\n      this.getUTCMonth,\n      MONTH,\n      this.setUTCDate,\n      true\n    );\n\n    this.setMonth = build(\n      'setMonth',\n      ['month', 'day'],\n      this.getMonth,\n      MONTH,\n      this.setDate\n    );\n\n    this.setUTCFullYear = build(\n      'setUTCFullYear',\n      ['year', 'month', 'day'],\n      this.getUTCFullYear,\n      YEAR,\n      this.setUTCMonth,\n      true\n    );\n\n    this.setFullYear = build(\n      'setFullYear',\n      ['year', 'month', 'day'],\n      this.getFullYear,\n      YEAR,\n      this.setMonth\n    );\n  }\n\n  setTime(time) {\n    this._full = toNano(time);\n    this._setupFunctions();\n    return time;\n  }\n\n  setUTCTime(time) {\n    return this.setTime(time);\n  }\n\n  _toString(funcName) {\n    const split = this._date[funcName]().split(' GMT');\n    const milli = this.getMilliseconds();\n    const micro = this.getMicroseconds();\n    const nano = this.getNanoseconds();\n    split[0] += `.${pad(milli)}${pad(micro)}${pad(nano)}`;\n    return split.join(' GMT');\n  }\n\n  toString() {\n    return this._toString('toString');\n  }\n\n  toUTCString() {\n    return this._toString('toUTCString');\n  }\n\n  toISOStringFull() {\n    const micro = this.getMicroseconds();\n    const nano = this.getNanoseconds();\n    return this._date.toISOString().replace('Z', `${pad(micro)}${pad(nano)}Z`);\n  }\n\n  @deprecate('Use toUTCString() instead')\n  toGMTString() {\n    return this.toUTCString();\n  }\n\n}\n\nexport default NanoDate;\n","/*! bignumber.js v4.0.4 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n;(function (globalObj) {\r\n    'use strict';\r\n\r\n    /*\r\n      bignumber.js v4.0.4\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\r\n\r\n\r\n    var BigNumber,\r\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        mathceil = Math.ceil,\r\n        mathfloor = Math.floor,\r\n        notBool = ' not a boolean or binary digit',\r\n        roundingMode = 'rounding mode',\r\n        tooManyDigits = 'number type has more than 15 significant digits',\r\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n        BASE = 1e14,\r\n        LOG_BASE = 14,\r\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n        SQRT_BASE = 1e7,\r\n\r\n        /*\r\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n         * exception is thrown (if ERRORS is true).\r\n         */\r\n        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\r\n    function constructorFactory(config) {\r\n        var div, parseNumeric,\r\n\r\n            // id tracks the caller function, so its name can be included in error messages.\r\n            id = 0,\r\n            P = BigNumber.prototype,\r\n            ONE = new BigNumber(1),\r\n\r\n\r\n            /********************************* EDITABLE DEFAULTS **********************************/\r\n\r\n\r\n            /*\r\n             * The default values below must be integers within the inclusive ranges stated.\r\n             * The values can also be changed at run-time using BigNumber.config.\r\n             */\r\n\r\n            // The maximum number of decimal places for operations involving division.\r\n            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n            /*\r\n             * The rounding mode used when rounding to the above decimal places, and when using\r\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n             * UP         0 Away from zero.\r\n             * DOWN       1 Towards zero.\r\n             * CEIL       2 Towards +Infinity.\r\n             * FLOOR      3 Towards -Infinity.\r\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n             */\r\n            ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n            // The exponent value at and beneath which toString returns exponential notation.\r\n            // Number type: -7\r\n            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n            // The exponent value at and above which toString returns exponential notation.\r\n            // Number type: 21\r\n            TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n            // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n            // The minimum exponent value, beneath which underflow to zero occurs.\r\n            // Number type: -324  (5e-324)\r\n            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n            // The maximum exponent value, above which overflow to Infinity occurs.\r\n            // Number type:  308  (1.7976931348623157e+308)\r\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n            MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n            // Whether BigNumber Errors are ever thrown.\r\n            ERRORS = true,                           // true or false\r\n\r\n            // Change to intValidatorNoErrors if ERRORS is false.\r\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\r\n            // Whether to use cryptographically-secure random number generation, if available.\r\n            CRYPTO = false,                          // true or false\r\n\r\n            /*\r\n             * The modulo mode used when calculating the modulus: a mod n.\r\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n             * The remainder (r) is calculated as: r = a - n * q.\r\n             *\r\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n             * DOWN      1 The remainder has the same sign as the dividend.\r\n             *             This modulo mode is commonly known as 'truncated division' and is\r\n             *             equivalent to (a % n) in JavaScript.\r\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n             *             The remainder is always positive.\r\n             *\r\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n             * modes are commonly used for the modulus operation.\r\n             * Although the other rounding modes can also be used, they may not give useful results.\r\n             */\r\n            MODULO_MODE = 1,                         // 0 to 9\r\n\r\n            // The maximum number of significant digits of the result of the toPower operation.\r\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n            POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n            // The format specification used by the BigNumber.prototype.toFormat method.\r\n            FORMAT = {\r\n                decimalSeparator: '.',\r\n                groupSeparator: ',',\r\n                groupSize: 3,\r\n                secondaryGroupSize: 0,\r\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n                fractionGroupSize: 0\r\n            };\r\n\r\n\r\n        /******************************************************************************************/\r\n\r\n\r\n        // CONSTRUCTOR\r\n\r\n\r\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\r\n        function BigNumber( n, b ) {\r\n            var c, e, i, num, len, str,\r\n                x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if ( !( x instanceof BigNumber ) ) {\r\n\r\n                // 'BigNumber() constructor call without new: {n}'\r\n                if (ERRORS) raise( 26, 'constructor call without new', n );\r\n                return new BigNumber( n, b );\r\n            }\r\n\r\n            // 'new BigNumber() base not an integer: {b}'\r\n            // 'new BigNumber() base out of range: {b}'\r\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\r\n\r\n                // Duplicate.\r\n                if ( n instanceof BigNumber ) {\r\n                    x.s = n.s;\r\n                    x.e = n.e;\r\n                    x.c = ( n = n.c ) ? n.slice() : n;\r\n                    id = 0;\r\n                    return;\r\n                }\r\n\r\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\r\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\r\n\r\n                    // Fast path for integers.\r\n                    if ( n === ~~n ) {\r\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\r\n                        x.e = e;\r\n                        x.c = [n];\r\n                        id = 0;\r\n                        return;\r\n                    }\r\n\r\n                    str = n + '';\r\n                } else {\r\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n            } else {\r\n                b = b | 0;\r\n                str = n + '';\r\n\r\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n                // Allow exponential notation to be used with base 10 argument.\r\n                if ( b == 10 ) {\r\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\r\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\r\n                }\r\n\r\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n                // Any number in exponential form will fail due to the [Ee][+-].\r\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\r\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\r\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\r\n                    return parseNumeric( x, str, num, b );\r\n                }\r\n\r\n                if (num) {\r\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\r\n\r\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\r\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                        raise( id, tooManyDigits, n );\r\n                    }\r\n\r\n                    // Prevent later check for length on converted number.\r\n                    num = false;\r\n                } else {\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n\r\n                str = convertBase( str, 10, b, x.s );\r\n            }\r\n\r\n            // Decimal point?\r\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\r\n\r\n            // Exponential form?\r\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\r\n\r\n                // Determine exponent.\r\n                if ( e < 0 ) e = i;\r\n                e += +str.slice( i + 1 );\r\n                str = str.substring( 0, i );\r\n            } else if ( e < 0 ) {\r\n\r\n                // Integer.\r\n                e = str.length;\r\n            }\r\n\r\n            // Determine leading zeros.\r\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\r\n\r\n            // Determine trailing zeros.\r\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\r\n            str = str.slice( i, len + 1 );\r\n\r\n            if (str) {\r\n                len = str.length;\r\n\r\n                // Disallow numbers with over 15 significant digits if number type.\r\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                if ( num && ERRORS && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {\r\n                    raise( id, tooManyDigits, x.s * n );\r\n                }\r\n\r\n                e = e - i - 1;\r\n\r\n                 // Overflow?\r\n                if ( e > MAX_EXP ) {\r\n\r\n                    // Infinity.\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow?\r\n                } else if ( e < MIN_EXP ) {\r\n\r\n                    // Zero.\r\n                    x.c = [ x.e = 0 ];\r\n                } else {\r\n                    x.e = e;\r\n                    x.c = [];\r\n\r\n                    // Transform base\r\n\r\n                    // e is the base 10 exponent.\r\n                    // i is where to slice str to get the first element of the coefficient array.\r\n                    i = ( e + 1 ) % LOG_BASE;\r\n                    if ( e < 0 ) i += LOG_BASE;\r\n\r\n                    if ( i < len ) {\r\n                        if (i) x.c.push( +str.slice( 0, i ) );\r\n\r\n                        for ( len -= LOG_BASE; i < len; ) {\r\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\r\n                        }\r\n\r\n                        str = str.slice(i);\r\n                        i = LOG_BASE - str.length;\r\n                    } else {\r\n                        i -= len;\r\n                    }\r\n\r\n                    for ( ; i--; str += '0' );\r\n                    x.c.push( +str );\r\n                }\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [ x.e = 0 ];\r\n            }\r\n\r\n            id = 0;\r\n        }\r\n\r\n\r\n        // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n        BigNumber.another = constructorFactory;\r\n\r\n        BigNumber.ROUND_UP = 0;\r\n        BigNumber.ROUND_DOWN = 1;\r\n        BigNumber.ROUND_CEIL = 2;\r\n        BigNumber.ROUND_FLOOR = 3;\r\n        BigNumber.ROUND_HALF_UP = 4;\r\n        BigNumber.ROUND_HALF_DOWN = 5;\r\n        BigNumber.ROUND_HALF_EVEN = 6;\r\n        BigNumber.ROUND_HALF_CEIL = 7;\r\n        BigNumber.ROUND_HALF_FLOOR = 8;\r\n        BigNumber.EUCLID = 9;\r\n\r\n\r\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\r\n        BigNumber.config = BigNumber.set = function () {\r\n            var v, p,\r\n                i = 0,\r\n                r = {},\r\n                a = arguments,\r\n                o = a[0],\r\n                has = o && typeof o == 'object'\r\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\r\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\r\n\r\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                DECIMAL_PLACES = v | 0;\r\n            }\r\n            r[p] = DECIMAL_PLACES;\r\n\r\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\r\n                ROUNDING_MODE = v | 0;\r\n            }\r\n            r[p] = ROUNDING_MODE;\r\n\r\n            // EXPONENTIAL_AT {number|number[]}\r\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\r\n                        TO_EXP_NEG = v[0] | 0;\r\n                        TO_EXP_POS = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\r\n                }\r\n            }\r\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\r\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n            // 'config() RANGE not an integer: {v}'\r\n            // 'config() RANGE cannot be zero: {v}'\r\n            // 'config() RANGE out of range: {v}'\r\n            if ( has( p = 'RANGE' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\r\n                        MIN_EXP = v[0] | 0;\r\n                        MAX_EXP = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\r\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\r\n                }\r\n            }\r\n            r[p] = [ MIN_EXP, MAX_EXP ];\r\n\r\n            // ERRORS {boolean|number} true, false, 1 or 0.\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            if ( has( p = 'ERRORS' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    id = 0;\r\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = ERRORS;\r\n\r\n            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n            // 'config() crypto unavailable: {crypto}'\r\n            if ( has( p = 'CRYPTO' ) ) {\r\n\r\n                if ( v === true || v === false || v === 1 || v === 0 ) {\r\n                    if (v) {\r\n                        v = typeof crypto == 'undefined';\r\n                        if ( !v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\r\n                            CRYPTO = true;\r\n                        } else if (ERRORS) {\r\n                            raise( 2, 'crypto unavailable', v ? void 0 : crypto );\r\n                        } else {\r\n                            CRYPTO = false;\r\n                        }\r\n                    } else {\r\n                        CRYPTO = false;\r\n                    }\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = CRYPTO;\r\n\r\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n            // 'config() MODULO_MODE not an integer: {v}'\r\n            // 'config() MODULO_MODE out of range: {v}'\r\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\r\n                MODULO_MODE = v | 0;\r\n            }\r\n            r[p] = MODULO_MODE;\r\n\r\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n            // 'config() POW_PRECISION not an integer: {v}'\r\n            // 'config() POW_PRECISION out of range: {v}'\r\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                POW_PRECISION = v | 0;\r\n            }\r\n            r[p] = POW_PRECISION;\r\n\r\n            // FORMAT {object}\r\n            // 'config() FORMAT not an object: {v}'\r\n            if ( has( p = 'FORMAT' ) ) {\r\n\r\n                if ( typeof v == 'object' ) {\r\n                    FORMAT = v;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + ' not an object', v );\r\n                }\r\n            }\r\n            r[p] = FORMAT;\r\n\r\n            return r;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\r\n        BigNumber.random = (function () {\r\n            var pow2_53 = 0x20000000000000;\r\n\r\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n            // Check if Math.random() produces more than 32 bits of randomness.\r\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\r\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n                  (Math.random() * 0x800000 | 0); };\r\n\r\n            return function (dp) {\r\n                var a, b, e, k, v,\r\n                    i = 0,\r\n                    c = [],\r\n                    rand = new BigNumber(ONE);\r\n\r\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\r\n                k = mathceil( dp / LOG_BASE );\r\n\r\n                if (CRYPTO) {\r\n\r\n                    // Browsers supporting crypto.getRandomValues.\r\n                    if (crypto.getRandomValues) {\r\n\r\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 53 bits:\r\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n                            //                                     11111 11111111 11111111\r\n                            // 0x20000 is 2^21.\r\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n                            // Rejection sampling:\r\n                            // 0 <= v < 9007199254740992\r\n                            // Probability that v >= 9e15, is\r\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n                            if ( v >= 9e15 ) {\r\n                                b = crypto.getRandomValues( new Uint32Array(2) );\r\n                                a[i] = b[0];\r\n                                a[i + 1] = b[1];\r\n                            } else {\r\n\r\n                                // 0 <= v <= 8999999999999999\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 2;\r\n                            }\r\n                        }\r\n                        i = k / 2;\r\n\r\n                    // Node.js supporting crypto.randomBytes.\r\n                    } else if (crypto.randomBytes) {\r\n\r\n                        // buffer\r\n                        a = crypto.randomBytes( k *= 7 );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n                            // 0 <= v < 9007199254740992\r\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\r\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\r\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\r\n\r\n                            if ( v >= 9e15 ) {\r\n                                crypto.randomBytes(7).copy( a, i );\r\n                            } else {\r\n\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 7;\r\n                            }\r\n                        }\r\n                        i = k / 7;\r\n                    } else {\r\n                        CRYPTO = false;\r\n                        if (ERRORS) raise( 14, 'crypto unavailable', crypto );\r\n                    }\r\n                }\r\n\r\n                // Use Math.random.\r\n                if (!CRYPTO) {\r\n\r\n                    for ( ; i < k; ) {\r\n                        v = random53bitInt();\r\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\r\n                    }\r\n                }\r\n\r\n                k = c[--i];\r\n                dp %= LOG_BASE;\r\n\r\n                // Convert trailing digits to zeros according to dp.\r\n                if ( k && dp ) {\r\n                    v = POWS_TEN[LOG_BASE - dp];\r\n                    c[i] = mathfloor( k / v ) * v;\r\n                }\r\n\r\n                // Remove trailing elements which are zero.\r\n                for ( ; c[i] === 0; c.pop(), i-- );\r\n\r\n                // Zero?\r\n                if ( i < 0 ) {\r\n                    c = [ e = 0 ];\r\n                } else {\r\n\r\n                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n                    for ( e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n                    // Count the digits of the first element of c to determine leading zeros, and...\r\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n                    // adjust the exponent accordingly.\r\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\r\n                }\r\n\r\n                rand.e = e;\r\n                rand.c = c;\r\n                return rand;\r\n            };\r\n        })();\r\n\r\n\r\n        // PRIVATE FUNCTIONS\r\n\r\n\r\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n        function convertBase( str, baseOut, baseIn, sign ) {\r\n            var d, e, k, r, x, xc, y,\r\n                i = str.indexOf( '.' ),\r\n                dp = DECIMAL_PLACES,\r\n                rm = ROUNDING_MODE;\r\n\r\n            if ( baseIn < 37 ) str = str.toLowerCase();\r\n\r\n            // Non-integer.\r\n            if ( i >= 0 ) {\r\n                k = POW_PRECISION;\r\n\r\n                // Unlimited precision.\r\n                POW_PRECISION = 0;\r\n                str = str.replace( '.', '' );\r\n                y = new BigNumber(baseIn);\r\n                x = y.pow( str.length - i );\r\n                POW_PRECISION = k;\r\n\r\n                // Convert str as if an integer, then restore the fraction part by dividing the\r\n                // result by its base raised to a power.\r\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\r\n                y.e = y.c.length;\r\n            }\r\n\r\n            // Convert the number as integer.\r\n            xc = toBaseOut( str, baseIn, baseOut );\r\n            e = k = xc.length;\r\n\r\n            // Remove trailing zeros.\r\n            for ( ; xc[--k] == 0; xc.pop() );\r\n            if ( !xc[0] ) return '0';\r\n\r\n            if ( i < 0 ) {\r\n                --e;\r\n            } else {\r\n                x.c = xc;\r\n                x.e = e;\r\n\r\n                // sign is needed for correct rounding.\r\n                x.s = sign;\r\n                x = div( x, y, dp, rm, baseOut );\r\n                xc = x.c;\r\n                r = x.r;\r\n                e = x.e;\r\n            }\r\n\r\n            d = e + dp + 1;\r\n\r\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n            i = xc[d];\r\n            k = baseOut / 2;\r\n            r = r || d < 0 || xc[d + 1] != null;\r\n\r\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n                         rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n            if ( d < 1 || !xc[0] ) {\r\n\r\n                // 1^-dp or 0.\r\n                str = r ? toFixedPoint( '1', -dp ) : '0';\r\n            } else {\r\n                xc.length = d;\r\n\r\n                if (r) {\r\n\r\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\r\n                        xc[d] = 0;\r\n\r\n                        if ( !d ) {\r\n                            ++e;\r\n                            xc = [1].concat(xc);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Determine trailing zeros.\r\n                for ( k = xc.length; !xc[--k]; );\r\n\r\n                // E.g. [4, 11, 15] becomes 4bf.\r\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\r\n                str = toFixedPoint( str, e );\r\n            }\r\n\r\n            // The caller will add the sign.\r\n            return str;\r\n        }\r\n\r\n\r\n        // Perform division in the specified base. Called by div and convertBase.\r\n        div = (function () {\r\n\r\n            // Assume non-zero x and k.\r\n            function multiply( x, k, base ) {\r\n                var m, temp, xlo, xhi,\r\n                    carry = 0,\r\n                    i = x.length,\r\n                    klo = k % SQRT_BASE,\r\n                    khi = k / SQRT_BASE | 0;\r\n\r\n                for ( x = x.slice(); i--; ) {\r\n                    xlo = x[i] % SQRT_BASE;\r\n                    xhi = x[i] / SQRT_BASE | 0;\r\n                    m = khi * xlo + xhi * klo;\r\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\r\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\r\n                    x[i] = temp % base;\r\n                }\r\n\r\n                if (carry) x = [carry].concat(x);\r\n\r\n                return x;\r\n            }\r\n\r\n            function compare( a, b, aL, bL ) {\r\n                var i, cmp;\r\n\r\n                if ( aL != bL ) {\r\n                    cmp = aL > bL ? 1 : -1;\r\n                } else {\r\n\r\n                    for ( i = cmp = 0; i < aL; i++ ) {\r\n\r\n                        if ( a[i] != b[i] ) {\r\n                            cmp = a[i] > b[i] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return cmp;\r\n            }\r\n\r\n            function subtract( a, b, aL, base ) {\r\n                var i = 0;\r\n\r\n                // Subtract b from a.\r\n                for ( ; aL--; ) {\r\n                    a[aL] -= i;\r\n                    i = a[aL] < b[aL] ? 1 : 0;\r\n                    a[aL] = i * base + a[aL] - b[aL];\r\n                }\r\n\r\n                // Remove leading zeros.\r\n                for ( ; !a[0] && a.length > 1; a.splice(0, 1) );\r\n            }\r\n\r\n            // x: dividend, y: divisor.\r\n            return function ( x, y, dp, rm, base ) {\r\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n                    yL, yz,\r\n                    s = x.s == y.s ? 1 : -1,\r\n                    xc = x.c,\r\n                    yc = y.c;\r\n\r\n                // Either NaN, Infinity or 0?\r\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\r\n\r\n                    return new BigNumber(\r\n\r\n                      // Return NaN if either NaN, or both Infinity or 0.\r\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\r\n\r\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n                    );\r\n                }\r\n\r\n                q = new BigNumber(s);\r\n                qc = q.c = [];\r\n                e = x.e - y.e;\r\n                s = dp + e + 1;\r\n\r\n                if ( !base ) {\r\n                    base = BASE;\r\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\r\n                    s = s / LOG_BASE | 0;\r\n                }\r\n\r\n                // Result exponent may be one less then the current value of e.\r\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\r\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\r\n\r\n                if ( s < 0 ) {\r\n                    qc.push(1);\r\n                    more = true;\r\n                } else {\r\n                    xL = xc.length;\r\n                    yL = yc.length;\r\n                    i = 0;\r\n                    s += 2;\r\n\r\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n                    n = mathfloor( base / ( yc[0] + 1 ) );\r\n\r\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n                    if ( n > 1 ) {\r\n                        yc = multiply( yc, n, base );\r\n                        xc = multiply( xc, n, base );\r\n                        yL = yc.length;\r\n                        xL = xc.length;\r\n                    }\r\n\r\n                    xi = yL;\r\n                    rem = xc.slice( 0, yL );\r\n                    remL = rem.length;\r\n\r\n                    // Add zeros to make remainder as long as divisor.\r\n                    for ( ; remL < yL; rem[remL++] = 0 );\r\n                    yz = yc.slice();\r\n                    yz = [0].concat(yz);\r\n                    yc0 = yc[0];\r\n                    if ( yc[1] >= base / 2 ) yc0++;\r\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\r\n                    do {\r\n                        n = 0;\r\n\r\n                        // Compare divisor and remainder.\r\n                        cmp = compare( yc, rem, yL, remL );\r\n\r\n                        // If divisor < remainder.\r\n                        if ( cmp < 0 ) {\r\n\r\n                            // Calculate trial digit, n.\r\n\r\n                            rem0 = rem[0];\r\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\r\n\r\n                            // n is how many times the divisor goes into the current remainder.\r\n                            n = mathfloor( rem0 / yc0 );\r\n\r\n                            //  Algorithm:\r\n                            //  1. product = divisor * trial digit (n)\r\n                            //  2. if product > remainder: product -= divisor, n--\r\n                            //  3. remainder -= product\r\n                            //  4. if product was < remainder at 2:\r\n                            //    5. compare new remainder and divisor\r\n                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\r\n                            if ( n > 1 ) {\r\n\r\n                                // n may be > base only when base is 3.\r\n                                if (n >= base) n = base - 1;\r\n\r\n                                // product = divisor * trial digit.\r\n                                prod = multiply( yc, n, base );\r\n                                prodL = prod.length;\r\n                                remL = rem.length;\r\n\r\n                                // Compare product and remainder.\r\n                                // If product > remainder.\r\n                                // Trial digit n too high.\r\n                                // n is 1 too high about 5% of the time, and is not known to have\r\n                                // ever been more than 1 too high.\r\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\r\n                                    n--;\r\n\r\n                                    // Subtract divisor from product.\r\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\r\n                                    prodL = prod.length;\r\n                                    cmp = 1;\r\n                                }\r\n                            } else {\r\n\r\n                                // n is 0 or 1, cmp is -1.\r\n                                // If n is 0, there is no need to compare yc and rem again below,\r\n                                // so change cmp to 1 to avoid it.\r\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                                if ( n == 0 ) {\r\n\r\n                                    // divisor < remainder, so n must be at least 1.\r\n                                    cmp = n = 1;\r\n                                }\r\n\r\n                                // product = divisor\r\n                                prod = yc.slice();\r\n                                prodL = prod.length;\r\n                            }\r\n\r\n                            if ( prodL < remL ) prod = [0].concat(prod);\r\n\r\n                            // Subtract product from remainder.\r\n                            subtract( rem, prod, remL, base );\r\n                            remL = rem.length;\r\n\r\n                             // If product was < remainder.\r\n                            if ( cmp == -1 ) {\r\n\r\n                                // Compare divisor and new remainder.\r\n                                // If divisor < new remainder, subtract divisor from remainder.\r\n                                // Trial digit n too low.\r\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\r\n                                    n++;\r\n\r\n                                    // Subtract divisor from remainder.\r\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\r\n                                    remL = rem.length;\r\n                                }\r\n                            }\r\n                        } else if ( cmp === 0 ) {\r\n                            n++;\r\n                            rem = [0];\r\n                        } // else cmp === 1 and n will be 0\r\n\r\n                        // Add the next digit, n, to the result array.\r\n                        qc[i++] = n;\r\n\r\n                        // Update the remainder.\r\n                        if ( rem[0] ) {\r\n                            rem[remL++] = xc[xi] || 0;\r\n                        } else {\r\n                            rem = [ xc[xi] ];\r\n                            remL = 1;\r\n                        }\r\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\r\n\r\n                    more = rem[0] != null;\r\n\r\n                    // Leading zero?\r\n                    if ( !qc[0] ) qc.splice(0, 1);\r\n                }\r\n\r\n                if ( base == BASE ) {\r\n\r\n                    // To calculate q.e, first get the number of digits of qc[0].\r\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\r\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\r\n\r\n                // Caller is convertBase.\r\n                } else {\r\n                    q.e = e;\r\n                    q.r = +more;\r\n                }\r\n\r\n                return q;\r\n            };\r\n        })();\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\r\n        function format( n, i, rm, caller ) {\r\n            var c0, e, ne, len, str;\r\n\r\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\r\n              ? rm | 0 : ROUNDING_MODE;\r\n\r\n            if ( !n.c ) return n.toString();\r\n            c0 = n.c[0];\r\n            ne = n.e;\r\n\r\n            if ( i == null ) {\r\n                str = coeffToString( n.c );\r\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n                  ? toExponential( str, ne )\r\n                  : toFixedPoint( str, ne );\r\n            } else {\r\n                n = round( new BigNumber(n), i, rm );\r\n\r\n                // n.e may have changed if the value was rounded up.\r\n                e = n.e;\r\n\r\n                str = coeffToString( n.c );\r\n                len = str.length;\r\n\r\n                // toPrecision returns exponential notation if the number of significant digits\r\n                // specified is less than the number of digits necessary to represent the integer\r\n                // part of the value in fixed-point notation.\r\n\r\n                // Exponential notation.\r\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\r\n\r\n                    // Append zeros?\r\n                    for ( ; len < i; str += '0', len++ );\r\n                    str = toExponential( str, e );\r\n\r\n                // Fixed-point notation.\r\n                } else {\r\n                    i -= ne;\r\n                    str = toFixedPoint( str, e );\r\n\r\n                    // Append zeros?\r\n                    if ( e + 1 > len ) {\r\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\r\n                    } else {\r\n                        i += e - len;\r\n                        if ( i > 0 ) {\r\n                            if ( e + 1 == len ) str += '.';\r\n                            for ( ; i--; str += '0' );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return n.s < 0 && c0 ? '-' + str : str;\r\n        }\r\n\r\n\r\n        // Handle BigNumber.max and BigNumber.min.\r\n        function maxOrMin( args, method ) {\r\n            var m, n,\r\n                i = 0;\r\n\r\n            if ( isArray( args[0] ) ) args = args[0];\r\n            m = new BigNumber( args[0] );\r\n\r\n            for ( ; ++i < args.length; ) {\r\n                n = new BigNumber( args[i] );\r\n\r\n                // If any number is NaN, return NaN.\r\n                if ( !n.s ) {\r\n                    m = n;\r\n                    break;\r\n                } else if ( method.call( m, n ) ) {\r\n                    m = n;\r\n                }\r\n            }\r\n\r\n            return m;\r\n        }\r\n\r\n\r\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\r\n        function intValidatorWithErrors( n, min, max, caller, name ) {\r\n            if ( n < min || n > max || n != truncate(n) ) {\r\n                raise( caller, ( name || 'decimal places' ) +\r\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\r\n        function normalise( n, c, e ) {\r\n            var i = 1,\r\n                j = c.length;\r\n\r\n             // Remove trailing zeros.\r\n            for ( ; !c[--j]; c.pop() );\r\n\r\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\r\n\r\n            // Overflow?\r\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\r\n\r\n                // Infinity.\r\n                n.c = n.e = null;\r\n\r\n            // Underflow?\r\n            } else if ( e < MIN_EXP ) {\r\n\r\n                // Zero.\r\n                n.c = [ n.e = 0 ];\r\n            } else {\r\n                n.e = e;\r\n                n.c = c;\r\n            }\r\n\r\n            return n;\r\n        }\r\n\r\n\r\n        // Handle values that fail the validity test in BigNumber.\r\n        parseNumeric = (function () {\r\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n                dotAfter = /^([^.]+)\\.$/,\r\n                dotBefore = /^\\.([^.]+)$/,\r\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n            return function ( x, str, num, b ) {\r\n                var base,\r\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\r\n\r\n                // No exception on ±Infinity or NaN.\r\n                if ( isInfinityOrNaN.test(s) ) {\r\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n                } else {\r\n                    if ( !num ) {\r\n\r\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\r\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n                            return !b || b == base ? p1 : m;\r\n                        });\r\n\r\n                        if (b) {\r\n                            base = b;\r\n\r\n                            // E.g. '1.' to '1', '.1' to '0.1'\r\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\r\n                        }\r\n\r\n                        if ( str != s ) return new BigNumber( s, base );\r\n                    }\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\r\n                    x.s = null;\r\n                }\r\n\r\n                x.c = x.e = null;\r\n                id = 0;\r\n            }\r\n        })();\r\n\r\n\r\n        // Throw a BigNumber Error.\r\n        function raise( caller, msg, val ) {\r\n            var error = new Error( [\r\n                'new BigNumber',     // 0\r\n                'cmp',               // 1\r\n                'config',            // 2\r\n                'div',               // 3\r\n                'divToInt',          // 4\r\n                'eq',                // 5\r\n                'gt',                // 6\r\n                'gte',               // 7\r\n                'lt',                // 8\r\n                'lte',               // 9\r\n                'minus',             // 10\r\n                'mod',               // 11\r\n                'plus',              // 12\r\n                'precision',         // 13\r\n                'random',            // 14\r\n                'round',             // 15\r\n                'shift',             // 16\r\n                'times',             // 17\r\n                'toDigits',          // 18\r\n                'toExponential',     // 19\r\n                'toFixed',           // 20\r\n                'toFormat',          // 21\r\n                'toFraction',        // 22\r\n                'pow',               // 23\r\n                'toPrecision',       // 24\r\n                'toString',          // 25\r\n                'BigNumber'          // 26\r\n            ][caller] + '() ' + msg + ': ' + val );\r\n\r\n            error.name = 'BigNumber Error';\r\n            id = 0;\r\n            throw error;\r\n        }\r\n\r\n\r\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\r\n        function round( x, sd, rm, r ) {\r\n            var d, i, j, k, n, ni, rd,\r\n                xc = x.c,\r\n                pows10 = POWS_TEN;\r\n\r\n            // if x is not Infinity or NaN...\r\n            if (xc) {\r\n\r\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n                // ni is the index of n within x.c.\r\n                // d is the number of digits of n.\r\n                // i is the index of rd within n including leading zeros.\r\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n                out: {\r\n\r\n                    // Get the number of digits of the first element of xc.\r\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\r\n                    i = sd - d;\r\n\r\n                    // If the rounding digit is in the first element of xc...\r\n                    if ( i < 0 ) {\r\n                        i += LOG_BASE;\r\n                        j = sd;\r\n                        n = xc[ ni = 0 ];\r\n\r\n                        // Get the rounding digit at index j of n.\r\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\r\n                    } else {\r\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\r\n\r\n                        if ( ni >= xc.length ) {\r\n\r\n                            if (r) {\r\n\r\n                                // Needed by sqrt.\r\n                                for ( ; xc.length <= ni; xc.push(0) );\r\n                                n = rd = 0;\r\n                                d = 1;\r\n                                i %= LOG_BASE;\r\n                                j = i - LOG_BASE + 1;\r\n                            } else {\r\n                                break out;\r\n                            }\r\n                        } else {\r\n                            n = k = xc[ni];\r\n\r\n                            // Get the number of digits of n.\r\n                            for ( d = 1; k >= 10; k /= 10, d++ );\r\n\r\n                            // Get the index of rd within n.\r\n                            i %= LOG_BASE;\r\n\r\n                            // Get the index of rd within n, adjusted for leading zeros.\r\n                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n                            j = i - LOG_BASE + d;\r\n\r\n                            // Get the rounding digit at index j of n.\r\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\r\n                        }\r\n                    }\r\n\r\n                    r = r || sd < 0 ||\r\n\r\n                    // Are there any non-zero digits after the rounding digit?\r\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\r\n\r\n                    r = rm < 4\r\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\r\n\r\n                        // Check whether the digit to the left of the rounding digit is odd.\r\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\r\n                          rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n                    if ( sd < 1 || !xc[0] ) {\r\n                        xc.length = 0;\r\n\r\n                        if (r) {\r\n\r\n                            // Convert sd to decimal places.\r\n                            sd -= x.e + 1;\r\n\r\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];\r\n                            x.e = -sd || 0;\r\n                        } else {\r\n\r\n                            // Zero.\r\n                            xc[0] = x.e = 0;\r\n                        }\r\n\r\n                        return x;\r\n                    }\r\n\r\n                    // Remove excess digits.\r\n                    if ( i == 0 ) {\r\n                        xc.length = ni;\r\n                        k = 1;\r\n                        ni--;\r\n                    } else {\r\n                        xc.length = ni + 1;\r\n                        k = pows10[ LOG_BASE - i ];\r\n\r\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n                        // j > 0 means i > number of leading zeros of n.\r\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\r\n                    }\r\n\r\n                    // Round up?\r\n                    if (r) {\r\n\r\n                        for ( ; ; ) {\r\n\r\n                            // If the digit to be rounded up is in the first element of xc...\r\n                            if ( ni == 0 ) {\r\n\r\n                                // i will be the length of xc[0] before k is added.\r\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\r\n                                j = xc[0] += k;\r\n                                for ( k = 1; j >= 10; j /= 10, k++ );\r\n\r\n                                // if i != k the length has increased.\r\n                                if ( i != k ) {\r\n                                    x.e++;\r\n                                    if ( xc[0] == BASE ) xc[0] = 1;\r\n                                }\r\n\r\n                                break;\r\n                            } else {\r\n                                xc[ni] += k;\r\n                                if ( xc[ni] != BASE ) break;\r\n                                xc[ni--] = 0;\r\n                                k = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Remove trailing zeros.\r\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\r\n                }\r\n\r\n                // Overflow? Infinity.\r\n                if ( x.e > MAX_EXP ) {\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow? Zero.\r\n                } else if ( x.e < MIN_EXP ) {\r\n                    x.c = [ x.e = 0 ];\r\n                }\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n\r\n        // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\r\n        P.absoluteValue = P.abs = function () {\r\n            var x = new BigNumber(this);\r\n            if ( x.s < 0 ) x.s = 1;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\r\n        P.ceil = function () {\r\n            return round( new BigNumber(this), this.e + 1, 2 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\r\n        P.comparedTo = P.cmp = function ( y, b ) {\r\n            id = 1;\r\n            return compare( this, new BigNumber( y, b ) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\r\n        P.decimalPlaces = P.dp = function () {\r\n            var n, v,\r\n                c = this.c;\r\n\r\n            if ( !c ) return null;\r\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\r\n\r\n            // Subtract the number of trailing zeros of the last number.\r\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\r\n            if ( n < 0 ) n = 0;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.dividedBy = P.div = function ( y, b ) {\r\n            id = 3;\r\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\r\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\r\n            id = 4;\r\n            return div( this, new BigNumber( y, b ), 0, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.equals = P.eq = function ( y, b ) {\r\n            id = 5;\r\n            return compare( this, new BigNumber( y, b ) ) === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\r\n        P.floor = function () {\r\n            return round( new BigNumber(this), this.e + 1, 3 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.greaterThan = P.gt = function ( y, b ) {\r\n            id = 6;\r\n            return compare( this, new BigNumber( y, b ) ) > 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\r\n            id = 7;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\r\n\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\r\n        P.isFinite = function () {\r\n            return !!this.c;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\r\n        P.isInteger = P.isInt = function () {\r\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\r\n        P.isNaN = function () {\r\n            return !this.s;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\r\n        P.isNegative = P.isNeg = function () {\r\n            return this.s < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\r\n        P.isZero = function () {\r\n            return !!this.c && this.c[0] == 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.lessThan = P.lt = function ( y, b ) {\r\n            id = 8;\r\n            return compare( this, new BigNumber( y, b ) ) < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\r\n            id = 9;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.minus = P.sub = function ( y, b ) {\r\n            var i, j, t, xLTy,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 10;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if ( a != b ) {\r\n                y.s = -b;\r\n                return x.plus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Either Infinity?\r\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\r\n\r\n                // Either zero?\r\n                if ( !xc[0] || !yc[0] ) {\r\n\r\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\r\n\r\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                      ROUNDING_MODE == 3 ? -0 : 0 );\r\n                }\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Determine which is the bigger number.\r\n            if ( a = xe - ye ) {\r\n\r\n                if ( xLTy = a < 0 ) {\r\n                    a = -a;\r\n                    t = xc;\r\n                } else {\r\n                    ye = xe;\r\n                    t = yc;\r\n                }\r\n\r\n                t.reverse();\r\n\r\n                // Prepend zeros to equalise exponents.\r\n                for ( b = a; b--; t.push(0) );\r\n                t.reverse();\r\n            } else {\r\n\r\n                // Exponents equal. Check digit by digit.\r\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\r\n\r\n                for ( a = b = 0; b < j; b++ ) {\r\n\r\n                    if ( xc[b] != yc[b] ) {\r\n                        xLTy = xc[b] < yc[b];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // x < y? Point xc to the array of the bigger number.\r\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n            b = ( j = yc.length ) - ( i = xc.length );\r\n\r\n            // Append zeros to xc if shorter.\r\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\r\n            b = BASE - 1;\r\n\r\n            // Subtract yc from xc.\r\n            for ( ; j > a; ) {\r\n\r\n                if ( xc[--j] < yc[j] ) {\r\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\r\n                    --xc[i];\r\n                    xc[j] += BASE;\r\n                }\r\n\r\n                xc[j] -= yc[j];\r\n            }\r\n\r\n            // Remove leading zeros and adjust exponent accordingly.\r\n            for ( ; xc[0] == 0; xc.splice(0, 1), --ye );\r\n\r\n            // Zero?\r\n            if ( !xc[0] ) {\r\n\r\n                // Following IEEE 754 (2008) 6.3,\r\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n                y.c = [ y.e = 0 ];\r\n                return y;\r\n            }\r\n\r\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n            // for finite x and y.\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\r\n        P.modulo = P.mod = function ( y, b ) {\r\n            var q, s,\r\n                x = this;\r\n\r\n            id = 11;\r\n            y = new BigNumber( y, b );\r\n\r\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\r\n                return new BigNumber(NaN);\r\n\r\n            // Return x if y is Infinity or x is zero.\r\n            } else if ( !y.c || x.c && !x.c[0] ) {\r\n                return new BigNumber(x);\r\n            }\r\n\r\n            if ( MODULO_MODE == 9 ) {\r\n\r\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n                // r = x - qy    where  0 <= r < abs(y)\r\n                s = y.s;\r\n                y.s = 1;\r\n                q = div( x, y, 0, 3 );\r\n                y.s = s;\r\n                q.s *= s;\r\n            } else {\r\n                q = div( x, y, 0, MODULO_MODE );\r\n            }\r\n\r\n            return x.minus( q.times(y) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\r\n        P.negated = P.neg = function () {\r\n            var x = new BigNumber(this);\r\n            x.s = -x.s || null;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.plus = P.add = function ( y, b ) {\r\n            var t,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 12;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n             if ( a != b ) {\r\n                y.s = -b;\r\n                return x.minus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Return ±Infinity if either ±Infinity.\r\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\r\n\r\n                // Either zero?\r\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n            if ( a = xe - ye ) {\r\n                if ( a > 0 ) {\r\n                    ye = xe;\r\n                    t = yc;\r\n                } else {\r\n                    a = -a;\r\n                    t = xc;\r\n                }\r\n\r\n                t.reverse();\r\n                for ( ; a--; t.push(0) );\r\n                t.reverse();\r\n            }\r\n\r\n            a = xc.length;\r\n            b = yc.length;\r\n\r\n            // Point xc to the longer array, and b to the shorter length.\r\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\r\n\r\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n            for ( a = 0; b; ) {\r\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\r\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n            }\r\n\r\n            if (a) {\r\n                xc = [a].concat(xc);\r\n                ++ye;\r\n            }\r\n\r\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n            // ye = MAX_EXP + 1 possible\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\r\n        P.precision = P.sd = function (z) {\r\n            var n, v,\r\n                x = this,\r\n                c = x.c;\r\n\r\n            // 'precision() argument not a boolean or binary digit: {z}'\r\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\r\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\r\n                if ( z != !!z ) z = null;\r\n            }\r\n\r\n            if ( !c ) return null;\r\n            v = c.length - 1;\r\n            n = v * LOG_BASE + 1;\r\n\r\n            if ( v = c[v] ) {\r\n\r\n                // Subtract the number of trailing zeros of the last element.\r\n                for ( ; v % 10 == 0; v /= 10, n-- );\r\n\r\n                // Add the number of digits of the first element.\r\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\r\n            }\r\n\r\n            if ( z && x.e + 1 > n ) n = x.e + 1;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\r\n        P.round = function ( dp, rm ) {\r\n            var n = new BigNumber(this);\r\n\r\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\r\n                round( n, ~~dp + this.e + 1, rm == null ||\r\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\r\n            }\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\r\n        P.shift = function (k) {\r\n            var n = this;\r\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\r\n\r\n              // k < 1e+21, or truncate(k) will produce exponential notation.\r\n              ? n.times( '1e' + truncate(k) )\r\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\r\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\r\n                : n );\r\n        };\r\n\r\n\r\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.squareRoot = P.sqrt = function () {\r\n            var m, n, r, rep, t,\r\n                x = this,\r\n                c = x.c,\r\n                s = x.s,\r\n                e = x.e,\r\n                dp = DECIMAL_PLACES + 4,\r\n                half = new BigNumber('0.5');\r\n\r\n            // Negative/NaN/Infinity/zero?\r\n            if ( s !== 1 || !c || !c[0] ) {\r\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\r\n            }\r\n\r\n            // Initial estimate.\r\n            s = Math.sqrt( +x );\r\n\r\n            // Math.sqrt underflow/overflow?\r\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n            if ( s == 0 || s == 1 / 0 ) {\r\n                n = coeffToString(c);\r\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\r\n                s = Math.sqrt(n);\r\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\r\n\r\n                if ( s == 1 / 0 ) {\r\n                    n = '1e' + e;\r\n                } else {\r\n                    n = s.toExponential();\r\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\r\n                }\r\n\r\n                r = new BigNumber(n);\r\n            } else {\r\n                r = new BigNumber( s + '' );\r\n            }\r\n\r\n            // Check for zero.\r\n            // r could be zero if MIN_EXP is changed after the this value was created.\r\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n            // coeffToString to throw.\r\n            if ( r.c[0] ) {\r\n                e = r.e;\r\n                s = e + dp;\r\n                if ( s < 3 ) s = 0;\r\n\r\n                // Newton-Raphson iteration.\r\n                for ( ; ; ) {\r\n                    t = r;\r\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\r\n\r\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\r\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\r\n\r\n                        // The exponent of r may here be one less than the final result exponent,\r\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n                        // are indexed correctly.\r\n                        if ( r.e < e ) --s;\r\n                        n = n.slice( s - 3, s + 1 );\r\n\r\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n                        // iteration.\r\n                        if ( n == '9999' || !rep && n == '4999' ) {\r\n\r\n                            // On the first iteration only, check to see if rounding up gives the\r\n                            // exact result as the nines may infinitely repeat.\r\n                            if ( !rep ) {\r\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\r\n\r\n                                if ( t.times(t).eq(x) ) {\r\n                                    r = t;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            dp += 4;\r\n                            s += 4;\r\n                            rep = 1;\r\n                        } else {\r\n\r\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n                            // result. If not, then there are further digits and m will be truthy.\r\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\r\n\r\n                                // Truncate to the first rounding digit.\r\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\r\n                                m = !r.times(r).eq(x);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\r\n        };\r\n\r\n\r\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.times = P.mul = function ( y, b ) {\r\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n                base, sqrtBase,\r\n                x = this,\r\n                xc = x.c,\r\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\r\n\r\n            // Either NaN, ±Infinity or ±0?\r\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\r\n\r\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\r\n                    y.c = y.e = y.s = null;\r\n                } else {\r\n                    y.s *= x.s;\r\n\r\n                    // Return ±Infinity if either is ±Infinity.\r\n                    if ( !xc || !yc ) {\r\n                        y.c = y.e = null;\r\n\r\n                    // Return ±0 if either is ±0.\r\n                    } else {\r\n                        y.c = [0];\r\n                        y.e = 0;\r\n                    }\r\n                }\r\n\r\n                return y;\r\n            }\r\n\r\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\r\n            y.s *= x.s;\r\n            xcL = xc.length;\r\n            ycL = yc.length;\r\n\r\n            // Ensure xc points to longer array and xcL to its length.\r\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n            // Initialise the result array with zeros.\r\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\r\n\r\n            base = BASE;\r\n            sqrtBase = SQRT_BASE;\r\n\r\n            for ( i = ycL; --i >= 0; ) {\r\n                c = 0;\r\n                ylo = yc[i] % sqrtBase;\r\n                yhi = yc[i] / sqrtBase | 0;\r\n\r\n                for ( k = xcL, j = i + k; j > i; ) {\r\n                    xlo = xc[--k] % sqrtBase;\r\n                    xhi = xc[k] / sqrtBase | 0;\r\n                    m = yhi * xlo + xhi * ylo;\r\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\r\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\r\n                    zc[j--] = xlo % base;\r\n                }\r\n\r\n                zc[j] = c;\r\n            }\r\n\r\n            if (c) {\r\n                ++e;\r\n            } else {\r\n                zc.splice(0, 1);\r\n            }\r\n\r\n            return normalise( y, zc, e );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\r\n        P.toDigits = function ( sd, rm ) {\r\n            var n = new BigNumber(this);\r\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\r\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\r\n            return sd ? round( n, sd, rm ) : n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\r\n        P.toExponential = function ( dp, rm ) {\r\n            return format( this,\r\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFixed = function ( dp, rm ) {\r\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\r\n              ? ~~dp + this.e + 1 : null, rm, 20 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFormat = function ( dp, rm ) {\r\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\r\n              ? ~~dp + this.e + 1 : null, rm, 21 );\r\n\r\n            if ( this.c ) {\r\n                var i,\r\n                    arr = str.split('.'),\r\n                    g1 = +FORMAT.groupSize,\r\n                    g2 = +FORMAT.secondaryGroupSize,\r\n                    groupSeparator = FORMAT.groupSeparator,\r\n                    intPart = arr[0],\r\n                    fractionPart = arr[1],\r\n                    isNeg = this.s < 0,\r\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n                    len = intDigits.length;\r\n\r\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n                if ( g1 > 0 && len > 0 ) {\r\n                    i = len % g1 || g1;\r\n                    intPart = intDigits.substr( 0, i );\r\n\r\n                    for ( ; i < len; i += g1 ) {\r\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\r\n                    }\r\n\r\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\r\n                    if (isNeg) intPart = '-' + intPart;\r\n                }\r\n\r\n                str = fractionPart\r\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\r\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\r\n                      '$&' + FORMAT.fractionGroupSeparator )\r\n                    : fractionPart )\r\n                  : intPart;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\r\n        P.toFraction = function (md) {\r\n            var arr, d0, d2, e, exp, n, n0, q, s,\r\n                k = ERRORS,\r\n                x = this,\r\n                xc = x.c,\r\n                d = new BigNumber(ONE),\r\n                n1 = d0 = new BigNumber(ONE),\r\n                d1 = n0 = new BigNumber(ONE);\r\n\r\n            if ( md != null ) {\r\n                ERRORS = false;\r\n                n = new BigNumber(md);\r\n                ERRORS = k;\r\n\r\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\r\n\r\n                    if (ERRORS) {\r\n                        raise( 22,\r\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\r\n                    }\r\n\r\n                    // ERRORS is false:\r\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\r\n                }\r\n            }\r\n\r\n            if ( !xc ) return x.toString();\r\n            s = coeffToString(xc);\r\n\r\n            // Determine initial denominator.\r\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n            e = d.e = s.length - x.e - 1;\r\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\r\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\r\n\r\n            exp = MAX_EXP;\r\n            MAX_EXP = 1 / 0;\r\n            n = new BigNumber(s);\r\n\r\n            // n0 = d1 = 0\r\n            n0.c[0] = 0;\r\n\r\n            for ( ; ; )  {\r\n                q = div( n, d, 0, 1 );\r\n                d2 = d0.plus( q.times(d1) );\r\n                if ( d2.cmp(md) == 1 ) break;\r\n                d0 = d1;\r\n                d1 = d2;\r\n                n1 = n0.plus( q.times( d2 = n1 ) );\r\n                n0 = d2;\r\n                d = n.minus( q.times( d2 = d ) );\r\n                n = d2;\r\n            }\r\n\r\n            d2 = div( md.minus(d0), d1, 0, 1 );\r\n            n0 = n0.plus( d2.times(n1) );\r\n            d0 = d0.plus( d2.times(d1) );\r\n            n0.s = n1.s = x.s;\r\n            e *= 2;\r\n\r\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\r\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\r\n                    ? [ n1.toString(), d1.toString() ]\r\n                    : [ n0.toString(), d0.toString() ];\r\n\r\n            MAX_EXP = exp;\r\n            return arr;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\r\n        P.toNumber = function () {\r\n            return +this;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If m is present, return the result modulo m.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n         * ROUNDING_MODE.\r\n         *\r\n         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n         *\r\n         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         * [m] {number|string|BigNumber} The modulus.\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         *\r\n         * Performs 54 loop iterations for n of 9007199254740991.\r\n         */\r\n        P.toPower = P.pow = function ( n, m ) {\r\n            var k, y, z,\r\n                i = mathfloor( n < 0 ? -n : +n ),\r\n                x = this;\r\n\r\n            if ( m != null ) {\r\n                id = 23;\r\n                m = new BigNumber(m);\r\n            }\r\n\r\n            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\r\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\r\n                parseFloat(n) != n && !( n = NaN ) ) || n == 0 ) {\r\n                k = Math.pow( +x, n );\r\n                return new BigNumber( m ? k % m : k );\r\n            }\r\n\r\n            if (m) {\r\n                if ( n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt() ) {\r\n                    x = x.mod(m);\r\n                } else {\r\n                    z = m;\r\n\r\n                    // Nullify m so only a single mod operation is performed at the end.\r\n                    m = null;\r\n                }\r\n            } else if (POW_PRECISION) {\r\n\r\n                // Truncating each coefficient array to a length of k after each multiplication\r\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n                // i.e. there will be a minimum of 28 guard digits retained.\r\n                // (Using + 1.5 would give [9, 21] guard digits.)\r\n                k = mathceil( POW_PRECISION / LOG_BASE + 2 );\r\n            }\r\n\r\n            y = new BigNumber(ONE);\r\n\r\n            for ( ; ; ) {\r\n                if ( i % 2 ) {\r\n                    y = y.times(x);\r\n                    if ( !y.c ) break;\r\n                    if (k) {\r\n                        if ( y.c.length > k ) y.c.length = k;\r\n                    } else if (m) {\r\n                        y = y.mod(m);\r\n                    }\r\n                }\r\n\r\n                i = mathfloor( i / 2 );\r\n                if ( !i ) break;\r\n                x = x.times(x);\r\n                if (k) {\r\n                    if ( x.c && x.c.length > k ) x.c.length = k;\r\n                } else if (m) {\r\n                    x = x.mod(m);\r\n                }\r\n            }\r\n\r\n            if (m) return y;\r\n            if ( n < 0 ) y = ONE.div(y);\r\n\r\n            return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\r\n        P.toPrecision = function ( sd, rm ) {\r\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\r\n              ? sd | 0 : null, rm, 24 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\r\n        P.toString = function (b) {\r\n            var str,\r\n                n = this,\r\n                s = n.s,\r\n                e = n.e;\r\n\r\n            // Infinity or NaN?\r\n            if ( e === null ) {\r\n\r\n                if (s) {\r\n                    str = 'Infinity';\r\n                    if ( s < 0 ) str = '-' + str;\r\n                } else {\r\n                    str = 'NaN';\r\n                }\r\n            } else {\r\n                str = coeffToString( n.c );\r\n\r\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\r\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                      ? toExponential( str, e )\r\n                      : toFixedPoint( str, e );\r\n                } else {\r\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\r\n                }\r\n\r\n                if ( s < 0 && n.c[0] ) str = '-' + str;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\r\n        P.truncated = P.trunc = function () {\r\n            return round( new BigNumber(this), this.e + 1, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\r\n        P.valueOf = P.toJSON = function () {\r\n            var str,\r\n                n = this,\r\n                e = n.e;\r\n\r\n            if ( e === null ) return n.toString();\r\n\r\n            str = coeffToString( n.c );\r\n\r\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                ? toExponential( str, e )\r\n                : toFixedPoint( str, e );\r\n\r\n            return n.s < 0 ? '-' + str : str;\r\n        };\r\n\r\n\r\n        P.isBigNumber = true;\r\n\r\n        if ( config != null ) BigNumber.config(config);\r\n\r\n        return BigNumber;\r\n    }\r\n\r\n\r\n    // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n    function bitFloor(n) {\r\n        var i = n | 0;\r\n        return n > 0 || n === i ? i : i - 1;\r\n    }\r\n\r\n\r\n    // Return a coefficient array as a string of base 10 digits.\r\n    function coeffToString(a) {\r\n        var s, z,\r\n            i = 1,\r\n            j = a.length,\r\n            r = a[0] + '';\r\n\r\n        for ( ; i < j; ) {\r\n            s = a[i++] + '';\r\n            z = LOG_BASE - s.length;\r\n            for ( ; z--; s = '0' + s );\r\n            r += s;\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\r\n        return r.slice( 0, j + 1 || 1 );\r\n    }\r\n\r\n\r\n    // Compare the value of BigNumbers x and y.\r\n    function compare( x, y ) {\r\n        var a, b,\r\n            xc = x.c,\r\n            yc = y.c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either NaN?\r\n        if ( !i || !j ) return null;\r\n\r\n        a = xc && !xc[0];\r\n        b = yc && !yc[0];\r\n\r\n        // Either zero?\r\n        if ( a || b ) return a ? b ? 0 : -j : i;\r\n\r\n        // Signs differ?\r\n        if ( i != j ) return i;\r\n\r\n        a = i < 0;\r\n        b = k == l;\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n        // Compare exponents.\r\n        if ( !b ) return k > l ^ a ? 1 : -1;\r\n\r\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n\r\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\r\n    function intValidatorNoErrors( n, min, max ) {\r\n        return ( n = truncate(n) ) >= min && n <= max;\r\n    }\r\n\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Array]';\r\n    }\r\n\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut( str, baseIn, baseOut ) {\r\n        var j,\r\n            arr = [0],\r\n            arrL,\r\n            i = 0,\r\n            len = str.length;\r\n\r\n        for ( ; i < len; ) {\r\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\r\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\r\n\r\n            for ( ; j < arr.length; j++ ) {\r\n\r\n                if ( arr[j] > baseOut - 1 ) {\r\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\r\n                    arr[j + 1] += arr[j] / baseOut | 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n\r\n    function toExponential( str, e ) {\r\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\r\n          ( e < 0 ? 'e' : 'e+' ) + e;\r\n    }\r\n\r\n\r\n    function toFixedPoint( str, e ) {\r\n        var len, z;\r\n\r\n        // Negative exponent?\r\n        if ( e < 0 ) {\r\n\r\n            // Prepend zeros.\r\n            for ( z = '0.'; ++e; z += '0' );\r\n            str = z + str;\r\n\r\n        // Positive exponent\r\n        } else {\r\n            len = str.length;\r\n\r\n            // Append zeros.\r\n            if ( ++e > len ) {\r\n                for ( z = '0', e -= len; --e; z += '0' );\r\n                str += z;\r\n            } else if ( e < len ) {\r\n                str = str.slice( 0, e ) + '.' + str.slice(e);\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function truncate(n) {\r\n        n = parseFloat(n);\r\n        return n < 0 ? mathceil(n) : mathfloor(n);\r\n    }\r\n\r\n\r\n    // EXPORT\r\n\r\n\r\n    BigNumber = constructorFactory();\r\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n\r\n    // AMD.\r\n    if ( typeof define == 'function' && define.amd ) {\r\n        define( function () { return BigNumber; } );\r\n\r\n    // Node.js and other environments that support module.exports.\r\n    } else if ( typeof module != 'undefined' && module.exports ) {\r\n        module.exports = BigNumber;\r\n\r\n    // Browser.\r\n    } else {\r\n        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();\r\n        globalObj.BigNumber = BigNumber;\r\n    }\r\n})(this);\r\n","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport { decorate } from './private/utils';\n\nvar labels = {};\n\n// Exported for mocking in tests\nexport var defaultConsole = {\n  time: console.time ? console.time.bind(console) : function (label) {\n    labels[label] = new Date();\n  },\n  timeEnd: console.timeEnd ? console.timeEnd.bind(console) : function (label) {\n    var timeNow = new Date();\n    var timeTaken = timeNow - labels[label];\n    delete labels[label];\n    console.log(label + ': ' + timeTaken + 'ms');\n  }\n};\n\nvar count = 0;\n\nfunction handleDescriptor(target, key, descriptor, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      _ref2$ = _ref2[0],\n      prefix = _ref2$ === undefined ? null : _ref2$,\n      _ref2$2 = _ref2[1],\n      console = _ref2$2 === undefined ? defaultConsole : _ref2$2;\n\n  var fn = descriptor.value;\n\n  if (prefix === null) {\n    prefix = target.constructor.name + '.' + key;\n  }\n\n  if (typeof fn !== 'function') {\n    throw new SyntaxError('@time can only be used on functions, not: ' + fn);\n  }\n\n  return _extends({}, descriptor, {\n    value: function value() {\n      var label = prefix + '-' + count;\n      count++;\n      console.time(label);\n\n      try {\n        return fn.apply(this, arguments);\n      } finally {\n        console.timeEnd(label);\n      }\n    }\n  });\n}\n\nexport default function time() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport { decorate, metaFor, warn, bind } from './private/utils';\n\nvar oc = console;\n\n// Exported for mocking in tests\nexport var defaultConsole = {\n  profile: console.profile ? bind(console.profile, console) : function () {},\n  profileEnd: console.profileEnd ? bind(console.profileEnd, console) : function () {},\n  warn: warn\n};\n\nfunction handleDescriptor(target, key, descriptor, _ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      _ref2$ = _ref2[0],\n      prefix = _ref2$ === undefined ? null : _ref2$,\n      _ref2$2 = _ref2[1],\n      onceThrottleOrFunction = _ref2$2 === undefined ? false : _ref2$2,\n      _ref2$3 = _ref2[2],\n      console = _ref2$3 === undefined ? defaultConsole : _ref2$3;\n\n  if (!profile.__enabled) {\n    if (!profile.__warned) {\n      console.warn('console.profile is not supported. All @profile decorators are disabled.');\n      profile.__warned = true;\n    }\n    return descriptor;\n  }\n\n  var fn = descriptor.value;\n\n  if (prefix === null) {\n    prefix = target.constructor.name + '.' + key;\n  }\n\n  if (typeof fn !== 'function') {\n    throw new SyntaxError('@profile can only be used on functions, not: ' + fn);\n  }\n\n  return _extends({}, descriptor, {\n    value: function value() {\n      var now = Date.now();\n      var meta = metaFor(this);\n      if (onceThrottleOrFunction === true && !meta.profileLastRan || onceThrottleOrFunction === false || typeof onceThrottleOrFunction === 'number' && now - meta.profileLastRan > onceThrottleOrFunction || typeof onceThrottleOrFunction === 'function' && onceThrottleOrFunction.apply(this, arguments)) {\n        console.profile(prefix);\n        meta.profileLastRan = now;\n      }\n\n      try {\n        return fn.apply(this, arguments);\n      } finally {\n        console.profileEnd(prefix);\n      }\n    }\n  });\n}\n\nexport default function profile() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}\n\n// Only Chrome, Firefox, and Edge support profile.\n// Exposing properties for testing.\nprofile.__enabled = !!console.profile;\nprofile.__warned = false;","module.exports = function(forceSimilar) {\n\tif (typeof Map !== 'function' || forceSimilar) {\n\t\tvar Similar = require('./similar');\n\t\treturn new Similar();\n\t}\n\telse {\n\t\treturn new Map();\n\t}\n}\n"],"names":["handleDescriptor","target","key","descriptor","configurable","enumerable","initializer","value","get","this","ret","call","defineProperty","writable","set","createDefaultSetter","lazyInitialize","_len","arguments","length","args","Array","_key","decorate","_initDefineProp","property","context","Object","_classCallCheck","instance","Constructor","TypeError","_applyDecoratedDescriptor","decorators","desc","forEach","slice","reverse","reduce","decorator","undefined","_toConsumableArray","arr","isArray","i","arr2","from","isDescriptor","hasOwnProperty","keys","l","entryArgs","apply","concat","prototype","getOwnPropertyDescriptors","obj","descs","getOwnKeys","getOwnPropertyDescriptor","newValue","bind","fn","_ref","_ref2","_slicedToArray","_ref2$","msg","DEFAULT_MSG","_ref2$2","options","SyntaxError","methodSignature","constructor","name","url","_extends","warn","getBoundSuper","WeakMap","Error","mapStore","has","superStore","autobindClass","klass","autobindMethod","getPrototypeOf","boundFn","handle","_toArray","originalGet","originalSet","originalValue","isGetter","_decorate","Similar","list","lastItem","size","moveToMostRecentLru","lru","lruPath","isMatch","ii","lruLen","lruPathLen","isEqual","arg","push","splice","removeCachedResult","removedLru","tmp","removedLruLen","currentLru","cacheItem","delete","val1","val2","pad","num","addZeros","padEndTo","toLen","str","count","front","toNano","DIGETS_IN_NANO","indexOf","toFixed","BigNumber","replace","onlyDigits","test","leapYear","yearBase","year","toNumber","daysForYear","daysForMonth","month","DAYS_LEAP_YEAR","DAYS","handleNotAnInteger","items","funcName","names","index","item","notUndefined","buildSetFunction","scope","argumentNames","getMethod","valueKey","setFunction","currentValue","v","_getValue","utc","_full","plus","truncated","minus","_setupFunctions","shift","moreVarsFunc","_class","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","globalObj","constructorFactory","config","n","b","c","e","len","x","ERRORS","raise","isValidInt","id","round","DECIMAL_PLACES","ROUNDING_MODE","RegExp","ALPHABET","parseNumeric","s","tooManyDigits","charCodeAt","convertBase","isNumeric","search","substring","MAX_SAFE_INTEGER","mathfloor","MAX_EXP","MIN_EXP","LOG_BASE","baseOut","baseIn","sign","d","k","r","xc","y","dp","rm","toLowerCase","POW_PRECISION","pow","toBaseOut","toFixedPoint","coeffToString","pop","div","charAt","format","caller","c0","ne","roundingMode","toString","TO_EXP_NEG","toExponential","maxOrMin","method","m","intValidatorWithErrors","min","max","truncate","normalise","j","val","error","sd","ni","rd","pows10","POWS_TEN","out","mathceil","BASE","P","ONE","TO_EXP_POS","CRYPTO","MODULO_MODE","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","another","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","p","a","o","MAX","intValidatorNoErrors","notBool","crypto","getRandomValues","randomBytes","lt","gt","random","random53bitInt","Math","rand","Uint32Array","copy","multiply","base","temp","xlo","xhi","carry","klo","SQRT_BASE","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","ceil","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","divToInt","equals","eq","floor","greaterThan","greaterThanOrEqualTo","gte","isFinite","isInteger","isInt","isNegative","isNeg","isZero","lessThan","lessThanOrEqualTo","lte","sub","t","xLTy","xe","ye","modulo","mod","times","negated","neg","add","precision","z","squareRoot","sqrt","rep","half","mul","xcL","ycL","ylo","yhi","zc","sqrtBase","toDigits","toFormat","split","g1","g2","intPart","fractionPart","intDigits","substr","toFraction","md","d0","d2","exp","n0","n1","d1","toPower","parseFloat","toPrecision","trunc","valueOf","toJSON","isBigNumber","arrL","module","exports","self","Function","_typeof","Symbol","iterator","getOwnPropertyNames","getOwnPropertySymbols","Meta","object","console","_createClass","defineProperties","props","protoProps","staticProps","FUNCTION_REGEXP","SyntaxErrorReporter","parentKlass","childKlass","parentDescriptor","childDescriptor","topic","_extractFunctionSignature","_this","match","parentPropertySignature","childPropertySignature","_getTopic","_extractTopicSignature","parentTopic","childTopic","condition","_this2","parentNotation","childNotation","assign","source","sliceIterator","_arr","_n","_d","_e","_s","_i","next","done","err","labels","time","timeEnd","profile","profileEnd","callback","thisArg","forceSimilar","Map","require$$0","limit","cache","MapOrSimilar","FORCE_SIMILAR_INSTEAD_OF_MAP","memoizerific","newMap","fnResult","currentCache","argsLengthMinusOne","isMemoized","numArgs","wasMemoized","window","BaseDate","Date","ISO_8601_FULL","MILLI_TO_NANO_DIFF","passThroughMethods","memoize","f","g","h","NanoDate","multi","date","UTC","padded","nanos","parseInt","setMilliseconds","setMicroseconds","setNanoseconds","_date","_buildSetFunctions","func","days","diff","start","getUTCFullYear","getFullYear","getUTCDate","getDate","getUTCMonth","getMonth","unit","currentYear","_getFullYear","res","_getDate","years","end","_getDaysBetween","_getMonth","type","numUnit","_getDays","getMicroseconds","valueOfWithMicro","getNanoseconds","build","setUTCNanoseconds","getUTCNanoseconds","setUTCMicroseconds","getUTCMicroseconds","setUTCMilliseconds","getUTCMilliseconds","setUTCSeconds","getUTCSeconds","setSeconds","getSeconds","setUTCMinutes","getUTCMinutes","setMinutes","getMinutes","setUTCHours","getUTCHours","setHours","getHours","setUTCDate","setDate","setUTCMonth","setMonth","setUTCFullYear","setFullYear","setTime","milli","getMilliseconds","micro","nano","join","_toString","toISOString","toUTCString","parse"],"mappings":"qCAIA,SAASA,EAAiBC,EAAQC,EAAKC,GACrC,IAAIC,EAAeD,EAAWC,aAC1BC,EAAaF,EAAWE,WACxBC,EAAcH,EAAWG,YACzBC,EAAQJ,EAAWI,MAEvB,OACEH,aAAcA,EACdC,WAAYA,EAEZG,IAAK,WAGH,GAAIC,OAASR,EAAb,CAIA,IAAIS,EAAMJ,EAAcA,EAAYK,KAAKF,MAAQF,EASjD,OAPAK,EAAeH,KAAMP,GACnBE,aAAcA,EACdC,WAAYA,EACZQ,UAAU,EACVN,MAAOG,IAGFA,IAITI,IAAKC,EAAoBb,IAI7B,SAAwBc,IACtB,IAAK,IAAIC,EAAOC,UAAUC,OAAQC,EAAOC,MAAMJ,GAAOK,EAAO,EAAGA,EAAOL,EAAMK,IAC3EF,EAAKE,GAAQJ,UAAUI,GAGzB,OAAOC,EAASvB,EAAkBoB,GCvCpC,SAASI,EAAgBvB,EAAQwB,EAAUtB,EAAYuB,GAChDvB,GACLwB,OAAOf,eAAeX,EAAQwB,GAC5BpB,WAAYF,EAAWE,WACvBD,aAAcD,EAAWC,aACzBS,SAAUV,EAAWU,SACrBN,MAAOJ,EAAWG,YAAcH,EAAWG,YAAYK,KAAKe,QAAW,IAI3E,SAASE,EAAgBC,EAAUC,GAAe,KAAMD,aAAoBC,GAAgB,MAAM,IAAIC,UAAU,qCAEhH,SAASC,EAA0B/B,EAAQwB,EAAUQ,EAAY9B,EAAYuB,GAC3E,IAAIQ,KAyBJ,OAxBAP,OAAkB,KAAExB,GAAYgC,QAAQ,SAAUjC,GAChDgC,EAAKhC,GAAOC,EAAWD,KAEzBgC,EAAK7B,aAAe6B,EAAK7B,WACzB6B,EAAK9B,eAAiB8B,EAAK9B,cAEvB,UAAW8B,GAAQA,EAAK5B,eAC1B4B,EAAKrB,UAAW,GAGlBqB,EAAOD,EAAWG,QAAQC,UAAUC,OAAO,SAAUJ,EAAMK,GACzD,OAAOA,EAAUtC,EAAQwB,EAAUS,IAASA,GAC3CA,GAECR,QAAgC,IAArBQ,EAAK5B,cAClB4B,EAAK3B,MAAQ2B,EAAK5B,YAAc4B,EAAK5B,YAAYK,KAAKe,QAAW,EACjEQ,EAAK5B,iBAAckC,QAGI,IAArBN,EAAK5B,cACPqB,OAA4B,eAAE1B,EAAQwB,EAAUS,GAChDA,EAAO,MAGFA,EAGT,SAISO,EAAmBC,GAAO,GAAIrB,MAAMsB,QAAQD,GAAM,CAAE,IAAK,IAAIE,EAAI,EAAGC,EAAOxB,MAAMqB,EAAIvB,QAASyB,EAAIF,EAAIvB,OAAQyB,IAAOC,EAAKD,GAAKF,EAAIE,GAAM,OAAOC,EAAe,OAAOxB,MAAMyB,KAAKJ,GAU1L,SAAgBK,EAAab,GAC3B,IAAKA,IAASA,EAAKc,eACjB,OAAO,EAKT,IAAK,IAFDC,GAAQ,QAAS,cAAe,MAAO,OAElCL,EAAI,EAAGM,EAAID,EAAK9B,OAAQyB,EAAIM,EAAGN,IACtC,GAAIV,EAAKc,eAAeC,EAAKL,IAC3B,OAAO,EAIX,OAAO,EAGT,SAAgBrB,EAASvB,EAAkBmD,GACzC,OAAIJ,EAAaI,EAAUA,EAAUhC,OAAS,IACrCnB,EAAiBoD,WAAMZ,EAAWC,EAAmBU,GAAWE,cAEhE,WACL,OAAOrD,EAAiBoD,WAAMZ,EAAWC,EAAmBpB,MAAMiC,UAAUlB,MAAMzB,KAAKO,YAAYmC,QAAQF,MA8DjH,SAAgBI,EAA0BC,GACxC,IAAIC,KAMJ,OAJAC,EAAWF,GAAKrB,QAAQ,SAAUjC,GAChC,OAAOuD,EAAMvD,GAAOyD,EAAyBH,EAAKtD,KAG7CuD,EAGT,SAAgB1C,EAAoBb,GAClC,OAAO,SAAa0D,GASlB,OARAjC,OAAOf,eAAeH,KAAMP,GAC1BE,cAAc,EACdS,UAAU,EAEVR,YAAY,EACZE,MAAOqD,IAGFA,GAIX,SAAgBC,EAAKC,EAAIpC,GACvB,OAAIoC,EAAGD,KACEC,EAAGD,KAAKnC,GAER,WACL,OAAOoC,EAAGV,MAAM1B,EAASR,YCvK/B,SAASU,EAAgBC,EAAUC,GAAe,KAAMD,aAAoBC,GAAgB,MAAM,IAAIC,UAAU,qCCIhH,SAAS/B,EAAiBC,EAAQC,EAAKC,EAAY4D,GACjD,IAAIC,EAAQC,GAAeF,EAAM,GAC7BG,EAASF,EAAM,GACfG,OAAiB3B,IAAX0B,EAAuBE,GAAcF,EAC3CG,EAAUL,EAAM,GAChBM,OAAsB9B,IAAZ6B,KAA6BA,EAE3C,GAAgC,mBAArBlE,EAAWI,MACpB,MAAM,IAAIgE,YAAY,8CAGxB,IAAIC,EAAkBvE,EAAOwE,YAAYC,KAAO,IAAMxE,EAMtD,OAJIoE,EAAQK,MACVR,GAAO,eAAiBG,EAAQK,IAAM,0BAGjCC,MAAazE,GAClBI,MAAO,WAEL,OADAsE,EAAK,eAAiBL,EAAkB,KAAOL,GACxChE,EAAWI,MAAM6C,MAAM3C,KAAMS,cC5B1C,SAASuB,EAAmBC,GAAO,GAAIrB,MAAMsB,QAAQD,GAAM,CAAE,IAAK,IAAIE,EAAI,EAAGC,EAAOxB,MAAMqB,EAAIvB,QAASyB,EAAIF,EAAIvB,OAAQyB,IAAOC,EAAKD,GAAKF,EAAIE,GAAM,OAAOC,EAAe,OAAOxB,MAAMyB,KAAKJ,GAS1L,SAASoC,EAActB,EAAKM,GAC1B,GAAuB,oBAAZiB,QACT,MAAM,IAAIC,MAAM,sBAAwBlB,EAAGY,KAAO,uDAAyDZ,EAAGY,KAAO,2EAGlHO,KACHA,GAAW,IAAIF,UAGS,IAAtBE,GAASC,IAAI1B,IACfyB,GAASnE,IAAI0C,EAAK,IAAIuB,SAGxB,IAAII,EAAaF,GAASzE,IAAIgD,GAM9B,OAJ2B,IAAvB2B,EAAWD,IAAIpB,IACjBqB,EAAWrE,IAAIgD,EAAID,EAAKC,EAAIN,IAGvB2B,EAAW3E,IAAIsD,GAGxB,SAASsB,EAAcC,GAIrB,IAAK,IAHD5B,EAAQF,EAA0B8B,EAAM/B,WACxCL,EAAOS,EAAWD,GAEbb,EAAI,EAAGM,EAAID,EAAK9B,OAAQyB,EAAIM,EAAGN,IAAK,CAC3C,IAAI1C,EAAM+C,EAAKL,GACXV,EAAOuB,EAAMvD,GAES,mBAAfgC,EAAK3B,OAAgC,gBAARL,GAIxCU,GAAeyE,EAAM/B,UAAWpD,EAAKoF,EAAeD,EAAM/B,UAAWpD,EAAKgC,KAI9E,SAASoD,EAAerF,EAAQC,EAAK6D,GACnC,IAAID,EAAKC,EAAKxD,MACVH,EAAe2D,EAAK3D,aACpBC,EAAa0D,EAAK1D,WAEtB,GAAkB,mBAAPyD,EACT,MAAM,IAAIS,YAAY,iDAAmDT,GAG3E,IAAIW,EAAcxE,EAAOwE,YAGzB,OACErE,aAAcA,EACdC,WAAYA,EAEZG,IAAK,WAIH,GAAIC,OAASR,EACX,OAAO6D,EAOT,GAAIrD,KAAKgE,cAAgBA,GAAec,GAAe9E,MAAMgE,cAAgBA,EAC3E,OAAOX,EAIT,GAAIrD,KAAKgE,cAAgBA,GAAevE,KAAOO,KAAKgE,YAAYnB,UAC9D,OAAOwB,EAAcrE,KAAMqD,GAG7B,IAAI0B,EAAU3B,EAAKC,EAAIrD,MAUvB,OARAG,GAAeH,KAAMP,GACnBE,cAAc,EACdS,UAAU,EAEVR,YAAY,EACZE,MAAOiF,IAGFA,GAGT1E,IAAKC,EAAoBb,IAI7B,SAASuF,EAAOrE,GACd,OAAoB,IAAhBA,EAAKD,OACAiE,EAAchC,WAAMZ,EAAWC,EAAmBrB,IAElDkE,EAAelC,WAAMZ,EAAWC,EAAmBrB,ICzG9D,SAASqB,EAAmBC,GAAO,GAAIrB,MAAMsB,QAAQD,GAAM,CAAE,IAAK,IAAIE,EAAI,EAAGC,EAAOxB,MAAMqB,EAAIvB,QAASyB,EAAIF,EAAIvB,OAAQyB,IAAOC,EAAKD,GAAKF,EAAIE,GAAM,OAAOC,EAAe,OAAOxB,MAAMyB,KAAKJ,GAE1L,SAASgD,EAAShD,GAAO,OAAOrB,MAAMsB,QAAQD,GAAOA,EAAMrB,MAAMyB,KAAKJ,GAMtE,SAAS1C,EAAiBC,EAAQC,EAAKC,EAAY4D,GACjD,IAAIC,EAAQ0B,EAAS3B,GACjBxB,EAAYyB,EAAM,GAClB5C,EAAO4C,EAAM5B,MAAM,GAEnBhC,EAAeD,EAAWC,aAC1BC,EAAaF,EAAWE,WACxBQ,EAAWV,EAAWU,SAEtB8E,EAAcxF,EAAWK,IACzBoF,EAAczF,EAAWW,IACzB+E,EAAgB1F,EAAWI,MAC3BuF,IAAaH,EAEjB,OACEvF,aAAcA,EACdC,WAAYA,EACZG,IAAK,WACH,IAAIsD,EAAKgC,EAAWH,EAAYhF,KAAKF,MAAQoF,EACzCtF,EAAQgC,EAAU5B,KAAKyC,MAAMb,GAAY9B,KAAMqD,GAAIT,OAAOZ,EAAmBrB,KAEjF,GAAI0E,EACF,OAAOvF,EAEP,IAAI2B,GACF9B,aAAcA,EACdC,WAAYA,GAQd,OALA6B,EAAK3B,MAAQA,EACb2B,EAAKrB,SAAWA,EAEhBD,GAAeH,KAAMP,EAAKgC,GAEnB3B,GAIXO,IAAKgF,EAAWF,EAAc7E,KAIlC,SAAwBQ,IACtB,IAAK,IAAIN,EAAOC,UAAUC,OAAQC,EAAOC,MAAMJ,GAAOK,EAAO,EAAGA,EAAOL,EAAMK,IAC3EF,EAAKE,GAAQJ,UAAUI,GAGzB,OAAOyE,EAAU/F,EAAkBoB,GCvDrC,SAAS4E,IAKR,OAJAvF,KAAKwF,QACLxF,KAAKyF,cAAW1D,EAChB/B,KAAK0F,KAAO,EAEL1F,KCwFR,SAAS2F,EAAoBC,EAAKC,GACjC,IAECC,EACA3D,EAAG4D,EAHAC,EAASJ,EAAIlF,OAChBuF,EAAaJ,EAAQnF,OAItB,IAAKyB,EAAI,EAAGA,EAAI6D,EAAQ7D,IAAK,CAE5B,IADA2D,GAAU,EACLC,EAAK,EAAGA,EAAKE,EAAYF,IAC7B,IAAKG,EAAQN,EAAIzD,GAAG4D,GAAII,IAAKN,EAAQE,GAAII,KAAM,CAC9CL,GAAU,EACV,MAGF,GAAIA,EACH,MAIFF,EAAIQ,KAAKR,EAAIS,OAAOlE,EAAG,GAAG,IAI3B,SAASmE,EAAmBC,GAC3B,IAECC,EACArE,EAHGsE,EAAgBF,EAAW7F,OAC9BgG,EAAaH,EAAWE,EAAgB,GAOzC,IAHAC,EAAWC,UAAUC,OAAOF,EAAWP,KAGlChE,EAAIsE,EAAgB,EAAGtE,GAAK,IAChCuE,EAAaH,EAAWpE,KACxBqE,EAAME,EAAWC,UAAU5G,IAAI2G,EAAWP,QAE7BK,EAAId,MAJkBvD,IAKlCuE,EAAWC,UAAUC,OAAOF,EAAWP,KAQ1C,SAASD,EAAQW,EAAMC,GACtB,OAAOD,IAASC,GAASD,IAASA,GAAQC,IAASA,waChFpD,SAASC,EAAIC,UACJC,EAASD,EAAKA,EAAM,IAAOA,EAAM,GAAK,EAAI,EAAK,GAAG,GAG3D,SAASE,EAASF,EAAKG,UACdF,EAASD,EAAK,MAAOA,GAAMtG,QAGpC,SAASuG,EAASG,OAAKC,yDAAQ,EAAGC,iEAClB,IAAVD,EACKD,EAEFH,GAAYK,EAAQ,IAAM,IAAKF,GAAOE,EAAc,GAAN,KAAYD,EAAQ,EAAGC,GAG9E,SAASC,EAAOP,OACVI,KAASJ,SACTI,EAAI1G,QAAU8G,GACZJ,EAAIK,QAAQ,MAAQ,KAChBT,EAAIU,QAAQ,GACX,IAAIC,EAAUP,EAAIQ,QAAQ,IAAK,IAAM,QAEvC,IAAID,EAAUP,GAEhB,IAAIO,EAAUP,EAAIzF,MAAM,EAAG6F,KAGpC,SAASK,EAAWb,qBACCc,QAAQd,GAG7B,SAASe,EAASC,OACVC,EAAOD,EAASE,kBACbD,EAAO,GAAM,GAAOA,EAAO,KAAQ,GAAQA,EAAO,KAAQ,EAGrE,SAASE,EAAYF,UACZF,EAASE,GAAQ,IAAM,IAGhC,SAASG,EAAaH,EAAMI,UACbN,EAASE,GAAQK,GAAiBC,IACnCF,EAAMH,YAGpB,SAASM,EAAmBC,EAAOC,EAAUC,OAAOC,yDAAQ,EACpDC,EAAOJ,EAAMG,GACb3E,EAAO0E,EAAMC,MACC,iBAATC,IAAsBhB,EAAWgB,SACpC,IAAItE,mBAAmBN,gBAAkByE,4BACtCC,EAAMjI,OAASkI,GAASE,EAAaL,EAAMG,EAAQ,OACzCH,EAAOC,EAAUC,EAAOC,EAAQ,GAIvD,SAASE,EAAaD,eACG,IAATA,EAGhB,SAASE,EAAiBC,EAAO/E,EAAMgF,EAAeC,EAAWC,YACtDC,+BAAezI,2CACHA,EAAMsD,EAAMgF,OACzBI,EAAeH,OACjBG,IAAiB1I,EAAK,GAAI,IACxB0I,EAAe1I,EAAK,GAAI,KACpB2I,EAAIN,EAAMO,UAAUrJ,KAAK8I,EAAOA,EAAOG,EAAUxI,EAAK,GAAK0I,EAAcG,KACzEC,MAAQT,EAAMS,MAAMC,KAAKJ,GAAGK,gBAC7B,KACCL,EAAIN,EAAMO,UAAUrJ,KAAK8I,EAAOA,EAAOG,EAAUE,EAAe1I,EAAK,GAAI6I,KACzEC,MAAQT,EAAMS,MAAMG,MAAMN,GAAGK,aAGjB,IAAhBhJ,EAAKD,QAAiBC,EAAKD,OAAS,IAAMoI,EAAanI,EAAK,QACxDkJ,gBAAgB3J,KAAK8I,UAI3BrI,EAAKD,OAAS,GAAKoI,EAAanI,EAAK,QAClCmJ,UACQnH,MAAMqG,EAAOrI,IAGrBuI,QAvBgEa,yDAAe,aAAUP,wEA0B3FrJ,eAAeiJ,EAAa,QAAUtJ,MAAOmE,EAAM7D,UAAU,IAE7DgJ,EAAYhG,KAAK4F,OPhJPgB,EAAQC,EAAaC,EAAcC,EAAcC,EAAcC,sLQAlF,SAAYC,GAsCR,SAASC,EAAmBC,GAiHxB,SAAS7C,EAAW8C,EAAGC,GACnB,IAAIC,EAAGC,EAAGzI,EAAG6E,EAAK6D,EAAKzD,EACnB0D,EAAI9K,KAGR,KAAQ8K,aAAanD,GAIjB,OADIoD,GAAQC,EAAO,GAAI,+BAAgCP,GAChD,IAAI9C,EAAW8C,EAAGC,GAK7B,GAAU,MAALA,GAAcO,EAAYP,EAAG,EAAG,GAAIQ,EAAI,QA4BtC,CAMH,GALAR,GAAQ,EACRtD,EAAMqD,EAAI,GAIA,IAALC,EAED,OADAI,EAAI,IAAInD,EAAW8C,aAAa9C,EAAY8C,EAAIrD,GACzC+D,EAAOL,EAAGM,EAAiBN,EAAEF,EAAI,EAAGS,GAK/C,IAAOrE,EAAkB,iBAALyD,IAAuB,EAAJA,GAAS,IAC7C,IAAMa,OAAQ,OAAUX,EAAI,IAAMY,EAAS5J,MAAO,EAAG+I,GAAM,MAC1D,SAAWC,EAAI,MAAMD,EAAI,GAAK,IAAM,IAAO5C,KAAKV,GAChD,OAAOoE,EAAcV,EAAG1D,EAAKJ,EAAK0D,GAGlC1D,GACA8D,EAAEW,EAAI,EAAIhB,EAAI,GAAMrD,EAAMA,EAAIzF,MAAM,IAAK,GAAM,EAE1CoJ,GAAU3D,EAAIQ,QAAS,YAAa,IAAKlH,OAAS,IAGnDsK,EAAOE,EAAIQ,EAAejB,GAI9BzD,GAAM,GAEN8D,EAAEW,EAA0B,KAAtBrE,EAAIuE,WAAW,IAAcvE,EAAMA,EAAIzF,MAAM,IAAK,GAAM,EAGlEyF,EAAMwE,EAAaxE,EAAK,GAAIsD,EAAGI,EAAEW,OA9DmB,CAGpD,GAAKhB,aAAa9C,EAKd,OAJAmD,EAAEW,EAAIhB,EAAEgB,EACRX,EAAEF,EAAIH,EAAEG,EACRE,EAAEH,GAAMF,EAAIA,EAAEE,GAAMF,EAAE9I,QAAU8I,OAChCS,EAAK,GAIT,IAAOlE,EAAkB,iBAALyD,IAAuB,EAAJA,GAAS,EAAI,CAIhD,GAHAK,EAAEW,EAAI,EAAIhB,EAAI,GAAMA,GAAKA,GAAI,GAAM,EAG9BA,MAAQA,EAAI,CACb,IAAMG,EAAI,EAAGzI,EAAIsI,EAAGtI,GAAK,GAAIA,GAAK,GAAIyI,KAItC,OAHAE,EAAEF,EAAIA,EACNE,EAAEH,GAAKF,QACPS,EAAK,GAIT9D,EAAMqD,EAAI,OACP,CACH,IAAMoB,EAAU/D,KAAMV,EAAMqD,EAAI,IAAO,OAAOe,EAAcV,EAAG1D,EAAKJ,GACpE8D,EAAEW,EAA0B,KAAtBrE,EAAIuE,WAAW,IAAcvE,EAAMA,EAAIzF,MAAM,IAAK,GAAM,GAwDtE,KAhBOiJ,EAAIxD,EAAIK,QAAQ,OAAU,IAAIL,EAAMA,EAAIQ,QAAS,IAAK,MAGtDzF,EAAIiF,EAAI0E,OAAQ,OAAW,GAGzBlB,EAAI,IAAIA,EAAIzI,GACjByI,IAAMxD,EAAIzF,MAAOQ,EAAI,GACrBiF,EAAMA,EAAI2E,UAAW,EAAG5J,IAChByI,EAAI,IAGZA,EAAIxD,EAAI1G,QAINyB,EAAI,EAAyB,KAAtBiF,EAAIuE,WAAWxJ,GAAWA,KAGvC,IAAM0I,EAAMzD,EAAI1G,OAAkC,KAA1B0G,EAAIuE,aAAad,KAGzC,GAFAzD,EAAMA,EAAIzF,MAAOQ,EAAG0I,EAAM,GActB,GAXAA,EAAMzD,EAAI1G,OAILsG,GAAO+D,GAAUF,EAAM,KAAQJ,EAAIuB,GAAoBvB,IAAMwB,EAAUxB,KACxEO,EAAOE,EAAIQ,EAAeZ,EAAEW,EAAIhB,IAGpCG,EAAIA,EAAIzI,EAAI,GAGH+J,EAGLpB,EAAEH,EAAIG,EAAEF,EAAI,UAGT,GAAKA,EAAIuB,EAGZrB,EAAEH,GAAMG,EAAEF,EAAI,OACX,CAWH,GAVAE,EAAEF,EAAIA,EACNE,EAAEH,KAMFxI,GAAMyI,EAAI,GAAMwB,EACXxB,EAAI,IAAIzI,GAAKiK,GAEbjK,EAAI0I,EAAM,CAGX,IAFI1I,GAAG2I,EAAEH,EAAEvE,MAAOgB,EAAIzF,MAAO,EAAGQ,IAE1B0I,GAAOuB,EAAUjK,EAAI0I,GACvBC,EAAEH,EAAEvE,MAAOgB,EAAIzF,MAAOQ,EAAGA,GAAKiK,IAGlChF,EAAMA,EAAIzF,MAAMQ,GAChBA,EAAIiK,EAAWhF,EAAI1G,YAEnByB,GAAK0I,EAGT,KAAQ1I,IAAKiF,GAAO,KACpB0D,EAAEH,EAAEvE,MAAOgB,QAKf0D,EAAEH,GAAMG,EAAEF,EAAI,GAGlBM,EAAK,EA2VT,SAASU,EAAaxE,EAAKiF,EAASC,EAAQC,GACxC,IAAIC,EAAG5B,EAAG6B,EAAGC,EAAG5B,EAAG6B,EAAIC,EACnBzK,EAAIiF,EAAIK,QAAS,KACjBoF,EAAKzB,EACL0B,EAAKzB,EA0BT,IAxBKiB,EAAS,KAAKlF,EAAMA,EAAI2F,eAGxB5K,GAAK,IACNsK,EAAIO,EAGJA,EAAgB,EAChB5F,EAAMA,EAAIQ,QAAS,IAAK,IAExBkD,GADA8B,EAAI,IAAIjF,EAAU2E,IACZW,IAAK7F,EAAI1G,OAASyB,GACxB6K,EAAgBP,EAIhBG,EAAEjC,EAAIuC,EAAWC,EAAcC,EAAetC,EAAEH,GAAKG,EAAEF,GAAK,GAAIyB,GAChEO,EAAEhC,EAAIgC,EAAEjC,EAAEjK,QAKdkK,EAAI6B,GADJE,EAAKO,EAAW9F,EAAKkF,EAAQD,IAClB3L,OAGQ,GAAXiM,IAAKF,GAASE,EAAGU,OACzB,IAAMV,EAAG,GAAK,MAAO,IA2BrB,GAzBKxK,EAAI,IACHyI,GAEFE,EAAEH,EAAIgC,EACN7B,EAAEF,EAAIA,EAGNE,EAAEW,EAAIc,EAENI,GADA7B,EAAIwC,EAAKxC,EAAG8B,EAAGC,EAAIC,EAAIT,IAChB1B,EACP+B,EAAI5B,EAAE4B,EACN9B,EAAIE,EAAEF,GAGV4B,EAAI5B,EAAIiC,EAAK,EAGb1K,EAAIwK,EAAGH,GACPC,EAAIJ,EAAU,EACdK,EAAIA,GAAKF,EAAI,GAAkB,MAAbG,EAAGH,EAAI,GAEzBE,EAAII,EAAK,GAAW,MAAL3K,GAAauK,KAAe,GAANI,GAAWA,IAAQhC,EAAEW,EAAI,EAAI,EAAI,IACzDtJ,EAAIsK,GAAKtK,GAAKsK,IAAY,GAANK,GAAWJ,GAAW,GAANI,GAAuB,EAAZH,EAAGH,EAAI,IACtDM,IAAQhC,EAAEW,EAAI,EAAI,EAAI,IAE9Be,EAAI,IAAMG,EAAG,GAGdvF,EAAMsF,EAAIS,EAAc,KAAMN,GAAO,QAClC,CAGH,GAFAF,EAAGjM,OAAS8L,EAERE,EAGA,MAAQL,IAAWM,IAAKH,GAAKH,GACzBM,EAAGH,GAAK,EAEFA,MACA5B,EACF+B,GAAM,GAAG/J,OAAO+J,IAM5B,IAAMF,EAAIE,EAAGjM,QAASiM,IAAKF,KAG3B,IAAMtK,EAAI,EAAGiF,EAAM,GAAIjF,GAAKsK,EAAGrF,GAAOmE,EAASgC,OAAQZ,EAAGxK,OAC1DiF,EAAM+F,EAAc/F,EAAKwD,GAI7B,OAAOxD,EA4QX,SAASoG,EAAQ/C,EAAGtI,EAAG2K,EAAIW,GACvB,IAAIC,EAAI9C,EAAG+C,EAAI9C,EAAKzD,EAKpB,GAHA0F,EAAW,MAANA,GAAc7B,EAAY6B,EAAI,EAAG,EAAGW,EAAQG,GACxC,EAALd,EAASzB,GAEPZ,EAAEE,EAAI,OAAOF,EAAEoD,WAIrB,GAHAH,EAAKjD,EAAEE,EAAE,GACTgD,EAAKlD,EAAEG,EAEG,MAALzI,EACDiF,EAAMgG,EAAe3C,EAAEE,GACvBvD,EAAgB,IAAVqG,GAA0B,IAAVA,GAAgBE,GAAMG,EACxCC,EAAe3G,EAAKuG,GACpBR,EAAc/F,EAAKuG,QAevB,GAbAlD,EAAIU,EAAO,IAAIxD,EAAU8C,GAAItI,EAAG2K,GAGhClC,EAAIH,EAAEG,EAENxD,EAAMgG,EAAe3C,EAAEE,GACvBE,EAAMzD,EAAI1G,OAOK,IAAV+M,GAA0B,IAAVA,IAAkBtL,GAAKyI,GAAKA,GAAKkD,GAAe,CAGjE,KAAQjD,EAAM1I,EAAGiF,GAAO,IAAKyD,KAC7BzD,EAAM2G,EAAe3G,EAAKwD,QAQ1B,GAJAzI,GAAKwL,EACLvG,EAAM+F,EAAc/F,EAAKwD,GAGpBA,EAAI,EAAIC,GACT,KAAO1I,EAAI,EAAI,IAAMiF,GAAO,IAAKjF,IAAKiF,GAAO,WAG7C,IADAjF,GAAKyI,EAAIC,GACA,EAEL,IADKD,EAAI,GAAKC,IAAMzD,GAAO,KACnBjF,IAAKiF,GAAO,KAMpC,OAAOqD,EAAEgB,EAAI,GAAKiC,EAAK,IAAMtG,EAAMA,EAKvC,SAAS4G,EAAUrN,EAAMsN,GACrB,IAAIC,EAAGzD,EACHtI,EAAI,EAKR,IAHKD,EAASvB,EAAK,MAAOA,EAAOA,EAAK,IACtCuN,EAAI,IAAIvG,EAAWhH,EAAK,MAEdwB,EAAIxB,EAAKD,QAAU,CAIzB,KAHA+J,EAAI,IAAI9C,EAAWhH,EAAKwB,KAGhBsJ,EAAI,CACRyC,EAAIzD,EACJ,MACQwD,EAAO/N,KAAMgO,EAAGzD,KACxByD,EAAIzD,GAIZ,OAAOyD,EAQX,SAASC,EAAwB1D,EAAG2D,EAAKC,EAAKZ,EAAQxJ,GAMlD,OALKwG,EAAI2D,GAAO3D,EAAI4D,GAAO5D,GAAK6D,EAAS7D,KACrCO,EAAOyC,GAAUxJ,GAAQ,mBACrBwG,EAAI2D,GAAO3D,EAAI4D,EAAM,gBAAkB,mBAAqB5D,IAG7D,EAQX,SAAS8D,EAAW9D,EAAGE,EAAGC,GAKtB,IAJA,IAAIzI,EAAI,EACJqM,EAAI7D,EAAEjK,QAGDiK,IAAI6D,GAAI7D,EAAE0C,OAGnB,IAAMmB,EAAI7D,EAAE,GAAI6D,GAAK,GAAIA,GAAK,GAAIrM,KAkBlC,OAfOyI,EAAIzI,EAAIyI,EAAIwB,EAAW,GAAMF,EAGhCzB,EAAEE,EAAIF,EAAEG,EAAI,KAGJA,EAAIuB,EAGZ1B,EAAEE,GAAMF,EAAEG,EAAI,IAEdH,EAAEG,EAAIA,EACNH,EAAEE,EAAIA,GAGHF,EAmDX,SAASO,EAAOyC,EAAQ/J,EAAK+K,GACzB,IAAIC,EAAQ,IAAInK,OACZ,gBACA,MACA,SACA,MACA,WACA,KACA,KACA,MACA,KACA,MACA,QACA,MACA,OACA,YACA,SACA,QACA,QACA,QACA,WACA,gBACA,UACA,WACA,aACA,MACA,cACA,WACA,aACFkJ,GAAU,MAAQ/J,EAAM,KAAO+K,GAIjC,MAFAC,EAAMzK,KAAO,kBACbiH,EAAK,EACCwD,EAQV,SAASvD,EAAOL,EAAG6D,EAAI7B,EAAIJ,GACvB,IAAIF,EAAGrK,EAAGqM,EAAG/B,EAAGhC,EAAGmE,EAAIC,EACnBlC,EAAK7B,EAAEH,EACPmE,EAASC,EAGb,GAAIpC,EAAI,CAQJqC,EAAK,CAGD,IAAMxC,EAAI,EAAGC,EAAIE,EAAG,GAAIF,GAAK,GAAIA,GAAK,GAAID,KAI1C,IAHArK,EAAIwM,EAAKnC,GAGA,EACLrK,GAAKiK,EACLoC,EAAIG,EAIJE,GAHApE,EAAIkC,EAAIiC,EAAK,IAGJE,EAAQtC,EAAIgC,EAAI,GAAM,GAAK,OAIpC,IAFAI,EAAKK,GAAY9M,EAAI,GAAMiK,KAEhBO,EAAGjM,OAAS,CAEnB,IAAIgM,EASA,MAAMsC,EANN,KAAQrC,EAAGjM,QAAUkO,EAAIjC,EAAGvG,KAAK,IACjCqE,EAAIoE,EAAK,EACTrC,EAAI,EAEJgC,GADArM,GAAKiK,GACGA,EAAW,MAIpB,CAIH,IAHA3B,EAAIgC,EAAIE,EAAGiC,GAGLpC,EAAI,EAAGC,GAAK,GAAIA,GAAK,GAAID,KAU/BqC,GAHAL,GAJArM,GAAKiK,GAIGA,EAAWI,GAGV,EAAI,EAAI/B,EAAIqE,EAAQtC,EAAIgC,EAAI,GAAM,GAAK,EAmBxD,GAfA9B,EAAIA,GAAKiC,EAAK,GAKE,MAAdhC,EAAGiC,EAAK,KAAgBJ,EAAI,EAAI/D,EAAIA,EAAIqE,EAAQtC,EAAIgC,EAAI,IAE1D9B,EAAII,EAAK,GACH+B,GAAMnC,KAAe,GAANI,GAAWA,IAAQhC,EAAEW,EAAI,EAAI,EAAI,IAClDoD,EAAK,GAAW,GAANA,IAAmB,GAAN/B,GAAWJ,GAAW,GAANI,IAGnC3K,EAAI,EAAIqM,EAAI,EAAI/D,EAAIqE,EAAQtC,EAAIgC,GAAM,EAAI7B,EAAGiC,EAAK,IAAO,GAAO,GAClE9B,IAAQhC,EAAEW,EAAI,EAAI,EAAI,IAEvBkD,EAAK,IAAMhC,EAAG,GAiBf,OAhBAA,EAAGjM,OAAS,EAERgM,GAGAiC,GAAM7D,EAAEF,EAAI,EAGZ+B,EAAG,GAAKmC,GAAU1C,EAAWuC,EAAKvC,GAAaA,GAC/CtB,EAAEF,GAAK+D,GAAM,GAIbhC,EAAG,GAAK7B,EAAEF,EAAI,EAGXE,EAkBX,GAdU,GAAL3I,GACDwK,EAAGjM,OAASkO,EACZnC,EAAI,EACJmC,MAEAjC,EAAGjM,OAASkO,EAAK,EACjBnC,EAAIqC,EAAQ1C,EAAWjK,GAIvBwK,EAAGiC,GAAMJ,EAAI,EAAIvC,EAAWxB,EAAIqE,EAAQtC,EAAIgC,GAAMM,EAAON,IAAO/B,EAAI,GAIpEC,EAEA,OAAY,CAGR,GAAW,GAANkC,EAAU,CAGX,IAAMzM,EAAI,EAAGqM,EAAI7B,EAAG,GAAI6B,GAAK,GAAIA,GAAK,GAAIrM,KAE1C,IADAqM,EAAI7B,EAAG,IAAMF,EACPA,EAAI,EAAG+B,GAAK,GAAIA,GAAK,GAAI/B,KAG1BtK,GAAKsK,IACN3B,EAAEF,IACG+B,EAAG,IAAMuC,IAAOvC,EAAG,GAAK,IAGjC,MAGA,GADAA,EAAGiC,IAAOnC,EACLE,EAAGiC,IAAOM,EAAO,MACtBvC,EAAGiC,KAAQ,EACXnC,EAAI,EAMhB,IAAMtK,EAAIwK,EAAGjM,OAAoB,IAAZiM,IAAKxK,GAAUwK,EAAGU,QAItCvC,EAAEF,EAAIsB,EACPpB,EAAEH,EAAIG,EAAEF,EAAI,KAGJE,EAAEF,EAAIuB,IACdrB,EAAEH,GAAMG,EAAEF,EAAI,IAItB,OAAOE,EA9zCX,IAAIwC,EAAK9B,EAGLN,EAAK,EACLiE,EAAIxH,EAAU9E,UACduM,EAAM,IAAIzH,EAAU,GAYpByD,EAAiB,GAejBC,EAAgB,EAMhByC,GAAc,EAIduB,EAAa,GAMblD,GAAW,IAKXD,EAAU,IAGVnB,GAAS,EAGTE,EAAakD,EAGbmB,GAAS,EAoBTC,EAAc,EAIdvC,EAAgB,EAGhBwC,GACIC,iBAAkB,IAClBC,eAAgB,IAChBC,UAAW,EACXC,mBAAoB,EACpBC,uBAAwB,IACxBC,kBAAmB,GAm3E3B,OA9rEAnI,EAAUoI,QAAUxF,EAEpB5C,EAAUqI,SAAW,EACrBrI,EAAUsI,WAAa,EACvBtI,EAAUuI,WAAa,EACvBvI,EAAUwI,YAAc,EACxBxI,EAAUyI,cAAgB,EAC1BzI,EAAU0I,gBAAkB,EAC5B1I,EAAU2I,gBAAkB,EAC5B3I,EAAU4I,gBAAkB,EAC5B5I,EAAU6I,iBAAmB,EAC7B7I,EAAU8I,OAAS,EAoCnB9I,EAAU6C,OAAS7C,EAAUtH,IAAM,WAC/B,IAAIiJ,EAAGoH,EACHvO,EAAI,EACJuK,KACAiE,EAAIlQ,UACJmQ,EAAID,EAAE,GACNlM,EAAMmM,GAAiB,iBAALA,EACd,WAAc,GAAKA,EAAErO,eAAemO,GAAK,OAAuB,OAAdpH,EAAIsH,EAAEF,KACxD,WAAc,GAAKC,EAAEjQ,OAASyB,EAAI,OAAyB,OAAhBmH,EAAIqH,EAAExO,OAuHzD,OAlHKsC,EAAKiM,EAAI,mBAAsBzF,EAAY3B,EAAG,EAAGuH,EAAK,EAAGH,KAC1DtF,EAAqB,EAAJ9B,GAErBoD,EAAEgE,GAAKtF,EAKF3G,EAAKiM,EAAI,kBAAqBzF,EAAY3B,EAAG,EAAG,EAAG,EAAGoH,KACvDrF,EAAoB,EAAJ/B,GAEpBoD,EAAEgE,GAAKrF,EAMF5G,EAAKiM,EAAI,oBAELxO,EAAQoH,GACJ2B,EAAY3B,EAAE,IAAKuH,EAAK,EAAG,EAAGH,IAAOzF,EAAY3B,EAAE,GAAI,EAAGuH,EAAK,EAAGH,KACnE5C,EAAoB,EAAPxE,EAAE,GACf+F,EAAoB,EAAP/F,EAAE,IAEX2B,EAAY3B,GAAIuH,EAAKA,EAAK,EAAGH,KACrC5C,IAAgBuB,EAAkC,GAAnB/F,EAAI,GAAKA,EAAIA,MAGpDoD,EAAEgE,IAAO5C,EAAYuB,GAOhB5K,EAAKiM,EAAI,WAELxO,EAAQoH,GACJ2B,EAAY3B,EAAE,IAAKuH,GAAM,EAAG,EAAGH,IAAOzF,EAAY3B,EAAE,GAAI,EAAGuH,EAAK,EAAGH,KACpEvE,EAAiB,EAAP7C,EAAE,GACZ4C,EAAiB,EAAP5C,EAAE,IAER2B,EAAY3B,GAAIuH,EAAKA,EAAK,EAAGH,KAC5B,EAAJpH,EAAQ6C,IAAaD,EAA+B,GAAnB5C,EAAI,GAAKA,EAAIA,IAC1CyB,GAAQC,EAAO,EAAG0F,EAAI,kBAAmBpH,KAG1DoD,EAAEgE,IAAOvE,EAASD,GAIbzH,EAAKiM,EAAI,YAELpH,MAAQA,GAAW,IAANA,GAAiB,IAANA,GACzB4B,EAAK,EACLD,GAAeF,IAAWzB,GAAM6E,EAAyB2C,GAClD/F,GACPC,EAAO,EAAG0F,EAAIK,EAASzH,IAG/BoD,EAAEgE,GAAK3F,EAKFtG,EAAKiM,EAAI,aAEC,IAANpH,IAAoB,IAANA,GAAqB,IAANA,GAAiB,IAANA,EACrCA,IACAA,EAAqB,oBAAV0H,SACAA,SAAWA,OAAOC,iBAAmBD,OAAOE,aACnD5B,GAAS,EACFvE,EACPC,EAAO,EAAG,qBAAsB1B,OAAI,EAAS0H,QAE7C1B,GAAS,EAGbA,GAAS,EAENvE,GACPC,EAAO,EAAG0F,EAAIK,EAASzH,IAG/BoD,EAAEgE,GAAKpB,EAKF7K,EAAKiM,EAAI,gBAAmBzF,EAAY3B,EAAG,EAAG,EAAG,EAAGoH,KACrDnB,EAAkB,EAAJjG,GAElBoD,EAAEgE,GAAKnB,EAKF9K,EAAKiM,EAAI,kBAAqBzF,EAAY3B,EAAG,EAAGuH,EAAK,EAAGH,KACzD1D,EAAoB,EAAJ1D,GAEpBoD,EAAEgE,GAAK1D,EAIFvI,EAAKiM,EAAI,YAEO,iBAALpH,EACRkG,EAASlG,EACFyB,GACPC,EAAO,EAAG0F,EAAI,iBAAkBpH,IAGxCoD,EAAEgE,GAAKlB,EAEA9C,GASX/E,EAAU0G,IAAM,WAAc,OAAOL,EAAUvN,UAAW0O,EAAEgC,KAQ5DxJ,EAAUyG,IAAM,WAAc,OAAOJ,EAAUvN,UAAW0O,EAAEiC,KAc5DzJ,EAAU0J,OAAS,WACf,IAMIC,EANU,iBAMQC,KAAKF,SAAsB,QAC7C,WAAc,OAAOpF,EAPX,iBAOsBsF,KAAKF,WACrC,WAAc,OAA2C,SAAlB,WAAhBE,KAAKF,SAAwB,IACjC,QAAhBE,KAAKF,SAAsB,IAElC,OAAO,SAAUxE,GACb,IAAI8D,EAAGjG,EAAGE,EAAG6B,EAAGnD,EACZnH,EAAI,EACJwI,KACA6G,EAAO,IAAI7J,EAAUyH,GAKzB,GAHAvC,EAAW,MAANA,GAAe5B,EAAY4B,EAAI,EAAGgE,EAAK,IAA6B,EAALhE,EAAjBzB,EACnDqB,EAAIwC,EAAUpC,EAAKT,GAEfkD,EAGA,GAAI0B,OAAOC,gBAAiB,CAIxB,IAFAN,EAAIK,OAAOC,gBAAiB,IAAIQ,YAAahF,GAAK,IAE1CtK,EAAIsK,IAQRnD,EAAW,OAAPqH,EAAExO,IAAgBwO,EAAExO,EAAI,KAAO,MAMzB,MACNuI,EAAIsG,OAAOC,gBAAiB,IAAIQ,YAAY,IAC5Cd,EAAExO,GAAKuI,EAAE,GACTiG,EAAExO,EAAI,GAAKuI,EAAE,KAKbC,EAAEvE,KAAMkD,EAAI,MACZnH,GAAK,GAGbA,EAAIsK,EAAI,OAGL,GAAIuE,OAAOE,YAAa,CAK3B,IAFAP,EAAIK,OAAOE,YAAazE,GAAK,GAErBtK,EAAIsK,IAMRnD,EAAsB,iBAAP,GAAPqH,EAAExO,IAA6C,cAAXwO,EAAExO,EAAI,GAC/B,WAAXwO,EAAExO,EAAI,GAAkC,SAAXwO,EAAExO,EAAI,IACnCwO,EAAExO,EAAI,IAAM,KAASwO,EAAExO,EAAI,IAAM,GAAMwO,EAAExO,EAAI,KAE3C,KACN6O,OAAOE,YAAY,GAAGQ,KAAMf,EAAGxO,IAI/BwI,EAAEvE,KAAMkD,EAAI,MACZnH,GAAK,GAGbA,EAAIsK,EAAI,OAER6C,GAAS,EACLvE,GAAQC,EAAO,GAAI,qBAAsBgG,QAKrD,IAAK1B,EAED,KAAQnN,EAAIsK,IACRnD,EAAIgI,KACK,OAAO3G,EAAExI,KAAOmH,EAAI,MAcrC,IAVAmD,EAAI9B,IAAIxI,GACR0K,GAAMT,EAGDK,GAAKI,IACNvD,EAAIyF,EAAS3C,EAAWS,GACxBlC,EAAExI,GAAK8J,EAAWQ,EAAInD,GAAMA,GAIf,IAATqB,EAAExI,GAAUwI,EAAE0C,MAAOlL,KAG7B,GAAKA,EAAI,EACLwI,GAAMC,EAAI,OACP,CAGH,IAAMA,GAAK,EAAa,IAATD,EAAE,GAAUA,EAAEtE,OAAO,EAAG,GAAIuE,GAAKwB,GAGhD,IAAMjK,EAAI,EAAGmH,EAAIqB,EAAE,GAAIrB,GAAK,GAAIA,GAAK,GAAInH,KAGpCA,EAAIiK,IAAWxB,GAAKwB,EAAWjK,GAKxC,OAFAqP,EAAK5G,EAAIA,EACT4G,EAAK7G,EAAIA,EACF6G,MAqGflE,EAAM,WAGF,SAASqE,EAAU7G,EAAG2B,EAAGmF,GACrB,IAAI1D,EAAG2D,EAAMC,EAAKC,EACdC,EAAQ,EACR7P,EAAI2I,EAAEpK,OACNuR,EAAMxF,EAAIyF,EACVC,EAAM1F,EAAIyF,EAAY,EAE1B,IAAMpH,EAAIA,EAAEnJ,QAASQ,KAKjB6P,IADAH,EAAOI,GAHPH,EAAMhH,EAAE3I,GAAK+P,IAEbhE,EAAIiE,EAAML,GADVC,EAAMjH,EAAE3I,GAAK+P,EAAY,GACHD,GACKC,EAAcA,EAAcF,GACtCJ,EAAO,IAAQ1D,EAAIgE,EAAY,GAAMC,EAAMJ,EAC5DjH,EAAE3I,GAAK0P,EAAOD,EAKlB,OAFII,IAAOlH,GAAKkH,GAAOpP,OAAOkI,IAEvBA,EAGX,SAASsH,EAASzB,EAAGjG,EAAG2H,EAAIC,GACxB,IAAInQ,EAAGoQ,EAEP,GAAKF,GAAMC,EACPC,EAAMF,EAAKC,EAAK,GAAK,OAGrB,IAAMnQ,EAAIoQ,EAAM,EAAGpQ,EAAIkQ,EAAIlQ,IAEvB,GAAKwO,EAAExO,IAAMuI,EAAEvI,GAAK,CAChBoQ,EAAM5B,EAAExO,GAAKuI,EAAEvI,GAAK,GAAK,EACzB,MAIZ,OAAOoQ,EAGX,SAASC,EAAU7B,EAAGjG,EAAG2H,EAAIT,GAIzB,IAHA,IAAIzP,EAAI,EAGAkQ,KACJ1B,EAAE0B,IAAOlQ,EACTA,EAAIwO,EAAE0B,GAAM3H,EAAE2H,GAAM,EAAI,EACxB1B,EAAE0B,GAAMlQ,EAAIyP,EAAOjB,EAAE0B,GAAM3H,EAAE2H,GAIjC,MAAS1B,EAAE,IAAMA,EAAEjQ,OAAS,EAAGiQ,EAAEtK,OAAO,EAAG,KAI/C,OAAO,SAAWyE,EAAG8B,EAAGC,EAAIC,EAAI8E,GAC5B,IAAIW,EAAK3H,EAAGzI,EAAGsQ,EAAMhI,EAAGiI,EAAMC,EAAOC,EAAGC,EAAIC,EAAKC,EAAMC,EAAMC,EAAIC,EAAIC,EACjEC,EAAIC,EACJ5H,EAAIX,EAAEW,GAAKmB,EAAEnB,EAAI,GAAK,EACtBkB,EAAK7B,EAAEH,EACP2I,EAAK1G,EAAEjC,EAGX,KAAMgC,GAAOA,EAAG,IAAO2G,GAAOA,EAAG,IAE7B,OAAO,IAAI3L,EAGRmD,EAAEW,GAAMmB,EAAEnB,IAAOkB,GAAK2G,GAAM3G,EAAG,IAAM2G,EAAG,GAAMA,GAG7C3G,GAAe,GAATA,EAAG,KAAY2G,EAAS,EAAJ7H,EAAQA,EAAI,EAHc8H,KAoB5D,IAZAV,GADAD,EAAI,IAAIjL,EAAU8D,IACXd,KAEPc,EAAIoB,GADJjC,EAAIE,EAAEF,EAAIgC,EAAEhC,GACC,EAEPgH,IACFA,EAAO1C,EACPtE,EAAI4I,EAAU1I,EAAEF,EAAIwB,GAAaoH,EAAU5G,EAAEhC,EAAIwB,GACjDX,EAAIA,EAAIW,EAAW,GAKjBjK,EAAI,EAAGmR,EAAGnR,KAAQwK,EAAGxK,IAAM,GAAKA,KAGtC,GAFKmR,EAAGnR,IAAOwK,EAAGxK,IAAM,IAAMyI,IAEzBa,EAAI,EACLoH,EAAGzM,KAAK,GACRqM,GAAO,MACJ,CAwBH,IAvBAS,EAAKvG,EAAGjM,OACR0S,EAAKE,EAAG5S,OACRyB,EAAI,EACJsJ,GAAK,GAILhB,EAAIwB,EAAW2F,GAAS0B,EAAG,GAAK,KAIvB,IACLA,EAAK3B,EAAU2B,EAAI7I,EAAGmH,GACtBjF,EAAKgF,EAAUhF,EAAIlC,EAAGmH,GACtBwB,EAAKE,EAAG5S,OACRwS,EAAKvG,EAAGjM,QAGZuS,EAAKG,EAELL,GADAD,EAAMnG,EAAGhL,MAAO,EAAGyR,IACR1S,OAGHqS,EAAOK,EAAIN,EAAIC,KAAU,GACjCM,EAAKC,EAAG3R,QACR0R,GAAM,GAAGzQ,OAAOyQ,GAChBF,EAAMG,EAAG,GACJA,EAAG,IAAM1B,EAAO,GAAIuB,IAIzB,EAAG,CAOC,GANA1I,EAAI,GAGJ8H,EAAMH,EAASkB,EAAIR,EAAKM,EAAIL,IAGjB,EAAI,CAkBX,GAdAC,EAAOF,EAAI,GACNM,GAAML,IAAOC,EAAOA,EAAOpB,GAASkB,EAAI,IAAM,KAGnDrI,EAAIwB,EAAW+G,EAAOG,IAUb,EAeL,IAZI1I,GAAKmH,IAAMnH,EAAImH,EAAO,GAI1Be,GADAD,EAAOf,EAAU2B,EAAI7I,EAAGmH,IACXlR,OACbqS,EAAOD,EAAIpS,OAOkC,GAArC0R,EAASM,EAAMI,EAAKH,EAAOI,IAC/BtI,IAGA+H,EAAUE,EAAMU,EAAKT,EAAQU,EAAKC,EAAIX,EAAOf,GAC7Ce,EAAQD,EAAKhS,OACb6R,EAAM,OAQA,GAAL9H,IAGD8H,EAAM9H,EAAI,GAKdkI,GADAD,EAAOY,EAAG3R,SACGjB,OAUjB,GAPKiS,EAAQI,IAAOL,GAAQ,GAAG9P,OAAO8P,IAGtCF,EAAUM,EAAKJ,EAAMK,EAAMnB,GAC3BmB,EAAOD,EAAIpS,QAGE,GAAR6R,EAMD,KAAQH,EAASkB,EAAIR,EAAKM,EAAIL,GAAS,GACnCtI,IAGA+H,EAAUM,EAAKM,EAAKL,EAAOM,EAAKC,EAAIP,EAAMnB,GAC1CmB,EAAOD,EAAIpS,YAGH,IAAR6R,IACR9H,IACAqI,GAAO,IAIXD,EAAG1Q,KAAOsI,EAGLqI,EAAI,GACLA,EAAIC,KAAUpG,EAAGsG,IAAO,GAExBH,GAAQnG,EAAGsG,IACXF,EAAO,UAEHE,IAAOC,GAAgB,MAAVJ,EAAI,KAAgBrH,KAE7CgH,EAAiB,MAAVK,EAAI,GAGLD,EAAG,IAAKA,EAAGxM,OAAO,EAAG,GAG/B,GAAKuL,GAAQ1C,EAAO,CAGhB,IAAM/M,EAAI,EAAGsJ,EAAIoH,EAAG,GAAIpH,GAAK,GAAIA,GAAK,GAAItJ,KAC1CgJ,EAAOyH,EAAG/F,GAAO+F,EAAEhI,EAAIzI,EAAIyI,EAAIwB,EAAW,GAAM,EAAGU,EAAI2F,QAIvDG,EAAEhI,EAAIA,EACNgI,EAAElG,GAAK+F,EAGX,OAAOG,MAgJfpH,EAAe,WACX,IAAIiI,EAAa,8BACbC,EAAW,cACXC,EAAY,cACZC,EAAkB,qBAClBC,EAAmB,6BAEvB,OAAO,SAAW/I,EAAG1D,EAAKJ,EAAK0D,GAC3B,IAAIkH,EACAnG,EAAIzE,EAAMI,EAAMA,EAAIQ,QAASiM,EAAkB,IAGnD,GAAKD,EAAgB9L,KAAK2D,GACtBX,EAAEW,EAAIqI,MAAMrI,GAAK,KAAOA,EAAI,GAAK,EAAI,MAClC,CACH,IAAMzE,IAGFyE,EAAIA,EAAE7D,QAAS6L,EAAY,SAAWvF,EAAG6F,EAAIC,GAEzC,OADApC,EAAoC,MAA3BoC,EAAKA,EAAGjH,eAAyB,GAAW,KAANiH,EAAY,EAAI,EACvDtJ,GAAKA,GAAKkH,EAAY1D,EAAL6F,IAGzBrJ,IACAkH,EAAOlH,EAGPe,EAAIA,EAAE7D,QAAS8L,EAAU,MAAO9L,QAAS+L,EAAW,SAGnDvM,GAAOqE,GAAI,OAAO,IAAI9D,EAAW8D,EAAGmG,GAKzC7G,GAAQC,EAAOE,EAAI,SAAYR,EAAI,SAAWA,EAAI,IAAO,UAAWtD,GACxE0D,EAAEW,EAAI,KAGVX,EAAEH,EAAIG,EAAEF,EAAI,KACZM,EAAK,MAmNbiE,EAAE8E,cAAgB9E,EAAE+E,IAAM,WACtB,IAAIpJ,EAAI,IAAInD,EAAU3H,MAEtB,OADK8K,EAAEW,EAAI,IAAIX,EAAEW,EAAI,GACdX,GAQXqE,EAAEgF,KAAO,WACL,OAAOhJ,EAAO,IAAIxD,EAAU3H,MAAOA,KAAK4K,EAAI,EAAG,IAWnDuE,EAAEiF,WAAajF,EAAEoD,IAAM,SAAW3F,EAAGlC,GAEjC,OADAQ,EAAK,EACEkH,EAASpS,KAAM,IAAI2H,EAAWiF,EAAGlC,KAQ5CyE,EAAEkF,cAAgBlF,EAAEtC,GAAK,WACrB,IAAIpC,EAAGnB,EACHqB,EAAI3K,KAAK2K,EAEb,IAAMA,EAAI,OAAO,KAIjB,GAHAF,IAAQnB,EAAIqB,EAAEjK,OAAS,GAAM8S,EAAUxT,KAAK4K,EAAIwB,IAAeA,EAG1D9C,EAAIqB,EAAErB,GAAK,KAAQA,EAAI,IAAM,EAAGA,GAAK,GAAImB,KAG9C,OAFKA,EAAI,IAAIA,EAAI,GAEVA,GAwBX0E,EAAEmF,UAAYnF,EAAE7B,IAAM,SAAWV,EAAGlC,GAEhC,OADAQ,EAAK,EACEoC,EAAKtN,KAAM,IAAI2H,EAAWiF,EAAGlC,GAAKU,EAAgBC,IAQ7D8D,EAAEoF,mBAAqBpF,EAAEqF,SAAW,SAAW5H,EAAGlC,GAE9C,OADAQ,EAAK,EACEoC,EAAKtN,KAAM,IAAI2H,EAAWiF,EAAGlC,GAAK,EAAG,IAQhDyE,EAAEsF,OAAStF,EAAEuF,GAAK,SAAW9H,EAAGlC,GAE5B,OADAQ,EAAK,EAC6C,IAA3CkH,EAASpS,KAAM,IAAI2H,EAAWiF,EAAGlC,KAQ5CyE,EAAEwF,MAAQ,WACN,OAAOxJ,EAAO,IAAIxD,EAAU3H,MAAOA,KAAK4K,EAAI,EAAG,IAQnDuE,EAAEyF,YAAczF,EAAEiC,GAAK,SAAWxE,EAAGlC,GAEjC,OADAQ,EAAK,EACEkH,EAASpS,KAAM,IAAI2H,EAAWiF,EAAGlC,IAAQ,GAQpDyE,EAAE0F,qBAAuB1F,EAAE2F,IAAM,SAAWlI,EAAGlC,GAE3C,OADAQ,EAAK,EACqD,KAAjDR,EAAI0H,EAASpS,KAAM,IAAI2H,EAAWiF,EAAGlC,MAAuB,IAANA,GAQnEyE,EAAE4F,SAAW,WACT,QAAS/U,KAAK2K,GAOlBwE,EAAE6F,UAAY7F,EAAE8F,MAAQ,WACpB,QAASjV,KAAK2K,GAAK6I,EAAUxT,KAAK4K,EAAIwB,GAAapM,KAAK2K,EAAEjK,OAAS,GAOvEyO,EAAE2E,MAAQ,WACN,OAAQ9T,KAAKyL,GAOjB0D,EAAE+F,WAAa/F,EAAEgG,MAAQ,WACrB,OAAOnV,KAAKyL,EAAI,GAOpB0D,EAAEiG,OAAS,WACP,QAASpV,KAAK2K,GAAkB,GAAb3K,KAAK2K,EAAE,IAQ9BwE,EAAEkG,SAAWlG,EAAEgC,GAAK,SAAWvE,EAAGlC,GAE9B,OADAQ,EAAK,EACEkH,EAASpS,KAAM,IAAI2H,EAAWiF,EAAGlC,IAAQ,GAQpDyE,EAAEmG,kBAAoBnG,EAAEoG,IAAM,SAAW3I,EAAGlC,GAExC,OADAQ,EAAK,GACsD,KAAlDR,EAAI0H,EAASpS,KAAM,IAAI2H,EAAWiF,EAAGlC,MAAwB,IAANA,GAwBpEyE,EAAEvF,MAAQuF,EAAEqG,IAAM,SAAW5I,EAAGlC,GAC5B,IAAIvI,EAAGqM,EAAGiH,EAAGC,EACT5K,EAAI9K,KACJ2Q,EAAI7F,EAAEW,EAOV,GALAP,EAAK,GACL0B,EAAI,IAAIjF,EAAWiF,EAAGlC,GACtBA,EAAIkC,EAAEnB,GAGAkF,IAAMjG,EAAI,OAAO,IAAI/C,EAAU4L,KAGrC,GAAK5C,GAAKjG,EAEN,OADAkC,EAAEnB,GAAKf,EACAI,EAAEpB,KAAKkD,GAGlB,IAAI+I,EAAK7K,EAAEF,EAAIwB,EACXwJ,EAAKhJ,EAAEhC,EAAIwB,EACXO,EAAK7B,EAAEH,EACP2I,EAAK1G,EAAEjC,EAEX,IAAMgL,IAAOC,EAAK,CAGd,IAAMjJ,IAAO2G,EAAK,OAAO3G,GAAOC,EAAEnB,GAAKf,EAAGkC,GAAM,IAAIjF,EAAW2L,EAAKxI,EAAIyI,KAGxE,IAAM5G,EAAG,KAAO2G,EAAG,GAGf,OAAOA,EAAG,IAAO1G,EAAEnB,GAAKf,EAAGkC,GAAM,IAAIjF,EAAWgF,EAAG,GAAK7B,EAGrC,GAAjBO,GAAsB,EAAI,GASpC,GALAsK,EAAKnC,EAASmC,GACdC,EAAKpC,EAASoC,GACdjJ,EAAKA,EAAGhL,QAGHgP,EAAIgF,EAAKC,EAAK,CAaf,KAXKF,EAAO/E,EAAI,IACZA,GAAKA,EACL8E,EAAI9I,IAEJiJ,EAAKD,EACLF,EAAInC,GAGRmC,EAAE7T,UAGI8I,EAAIiG,EAAGjG,IAAK+K,EAAErP,KAAK,IACzBqP,EAAE7T,eAMF,IAFA4M,GAAMkH,GAAS/E,EAAIhE,EAAGjM,SAAagK,EAAI4I,EAAG5S,SAAaiQ,EAAIjG,EAErDiG,EAAIjG,EAAI,EAAGA,EAAI8D,EAAG9D,IAEpB,GAAKiC,EAAGjC,IAAM4I,EAAG5I,GAAK,CAClBgL,EAAO/I,EAAGjC,GAAK4I,EAAG5I,GAClB,MAYZ,GANIgL,IAAMD,EAAI9I,EAAIA,EAAK2G,EAAIA,EAAKmC,EAAG7I,EAAEnB,GAAKmB,EAAEnB,IAE5Cf,GAAM8D,EAAI8E,EAAG5S,SAAayB,EAAIwK,EAAGjM,SAIxB,EAAI,KAAQgK,IAAKiC,EAAGxK,KAAO,GAIpC,IAHAuI,EAAIwE,EAAO,EAGHV,EAAImC,GAAK,CAEb,GAAKhE,IAAK6B,GAAK8E,EAAG9E,GAAK,CACnB,IAAMrM,EAAIqM,EAAGrM,IAAMwK,IAAKxK,GAAIwK,EAAGxK,GAAKuI,KAClCiC,EAAGxK,GACLwK,EAAG6B,IAAMU,EAGbvC,EAAG6B,IAAM8E,EAAG9E,GAIhB,KAAiB,GAAT7B,EAAG,GAASA,EAAGtG,OAAO,EAAG,KAAMuP,GAGvC,OAAMjJ,EAAG,GAWF4B,EAAW3B,EAAGD,EAAIiJ,IAPrBhJ,EAAEnB,EAAqB,GAAjBJ,GAAsB,EAAI,EAChCuB,EAAEjC,GAAMiC,EAAEhC,EAAI,GACPgC,IA8BfuC,EAAE0G,OAAS1G,EAAE2G,IAAM,SAAWlJ,EAAGlC,GAC7B,IAAIkI,EAAGnH,EACHX,EAAI9K,KAMR,OAJAkL,EAAK,GACL0B,EAAI,IAAIjF,EAAWiF,EAAGlC,IAGhBI,EAAEH,IAAMiC,EAAEnB,GAAKmB,EAAEjC,IAAMiC,EAAEjC,EAAE,GACtB,IAAIhD,EAAU4L,MAGZ3G,EAAEjC,GAAKG,EAAEH,IAAMG,EAAEH,EAAE,GACrB,IAAIhD,EAAUmD,IAGL,GAAfyE,GAID9D,EAAImB,EAAEnB,EACNmB,EAAEnB,EAAI,EACNmH,EAAItF,EAAKxC,EAAG8B,EAAG,EAAG,GAClBA,EAAEnB,EAAIA,EACNmH,EAAEnH,GAAKA,GAEPmH,EAAItF,EAAKxC,EAAG8B,EAAG,EAAG2C,GAGfzE,EAAElB,MAAOgJ,EAAEmD,MAAMnJ,MAQ5BuC,EAAE6G,QAAU7G,EAAE8G,IAAM,WAChB,IAAInL,EAAI,IAAInD,EAAU3H,MAEtB,OADA8K,EAAEW,GAAKX,EAAEW,GAAK,KACPX,GAwBXqE,EAAEzF,KAAOyF,EAAE+G,IAAM,SAAWtJ,EAAGlC,GAC3B,IAAI+K,EACA3K,EAAI9K,KACJ2Q,EAAI7F,EAAEW,EAOV,GALAP,EAAK,GACL0B,EAAI,IAAIjF,EAAWiF,EAAGlC,GACtBA,EAAIkC,EAAEnB,GAGAkF,IAAMjG,EAAI,OAAO,IAAI/C,EAAU4L,KAGpC,GAAK5C,GAAKjG,EAEP,OADAkC,EAAEnB,GAAKf,EACAI,EAAElB,MAAMgD,GAGnB,IAAI+I,EAAK7K,EAAEF,EAAIwB,EACXwJ,EAAKhJ,EAAEhC,EAAIwB,EACXO,EAAK7B,EAAEH,EACP2I,EAAK1G,EAAEjC,EAEX,IAAMgL,IAAOC,EAAK,CAGd,IAAMjJ,IAAO2G,EAAK,OAAO,IAAI3L,EAAWgJ,EAAI,GAI5C,IAAMhE,EAAG,KAAO2G,EAAG,GAAK,OAAOA,EAAG,GAAK1G,EAAI,IAAIjF,EAAWgF,EAAG,GAAK7B,EAAQ,EAAJ6F,GAQ1E,GALAgF,EAAKnC,EAASmC,GACdC,EAAKpC,EAASoC,GACdjJ,EAAKA,EAAGhL,QAGHgP,EAAIgF,EAAKC,EAAK,CAUf,IATKjF,EAAI,GACLiF,EAAKD,EACLF,EAAInC,IAEJ3C,GAAKA,EACL8E,EAAI9I,GAGR8I,EAAE7T,UACM+O,IAAK8E,EAAErP,KAAK,IACpBqP,EAAE7T,UAUN,KAPA+O,EAAIhE,EAAGjM,SACPgK,EAAI4I,EAAG5S,QAGM,IAAI+U,EAAInC,EAAIA,EAAK3G,EAAIA,EAAK8I,EAAG/K,EAAIiG,GAGxCA,EAAI,EAAGjG,GACTiG,GAAMhE,IAAKjC,GAAKiC,EAAGjC,GAAK4I,EAAG5I,GAAKiG,GAAMzB,EAAO,EAC7CvC,EAAGjC,GAAKwE,IAASvC,EAAGjC,GAAK,EAAIiC,EAAGjC,GAAKwE,EAUzC,OAPIyB,IACAhE,GAAMgE,GAAG/N,OAAO+J,KACdiJ,GAKCrH,EAAW3B,EAAGD,EAAIiJ,IAS7BzG,EAAEgH,UAAYhH,EAAER,GAAK,SAAUyH,GAC3B,IAAI3L,EAAGnB,EACHwB,EAAI9K,KACJ2K,EAAIG,EAAEH,EAQV,GALU,MAALyL,GAAaA,MAAQA,GAAW,IAANA,GAAiB,IAANA,IAClCrL,GAAQC,EAAO,GAAI,WAAa+F,EAASqF,GACxCA,KAAOA,IAAIA,EAAI,QAGlBzL,EAAI,OAAO,KAIjB,GAHArB,EAAIqB,EAAEjK,OAAS,EACf+J,EAAInB,EAAI8C,EAAW,EAEd9C,EAAIqB,EAAErB,GAAK,CAGZ,KAAQA,EAAI,IAAM,EAAGA,GAAK,GAAImB,KAG9B,IAAMnB,EAAIqB,EAAE,GAAIrB,GAAK,GAAIA,GAAK,GAAImB,MAKtC,OAFK2L,GAAKtL,EAAEF,EAAI,EAAIH,IAAIA,EAAIK,EAAEF,EAAI,GAE3BH,GAiBX0E,EAAEhE,MAAQ,SAAW0B,EAAIC,GACrB,IAAIrC,EAAI,IAAI9C,EAAU3H,MAOtB,OALW,MAAN6M,GAAc5B,EAAY4B,EAAI,EAAGgE,EAAK,MACvC1F,EAAOV,IAAKoC,EAAK7M,KAAK4K,EAAI,EAAS,MAANkC,GAC1B7B,EAAY6B,EAAI,EAAG,EAAG,GAAIc,GAAsC,EAALd,EAAhBzB,GAG3CZ,GAgBX0E,EAAErF,MAAQ,SAAU2C,GAChB,IAAIhC,EAAIzK,KACR,OAAOiL,EAAYwB,GAAIT,EAAkBA,EAAkB,GAAI,YAG3DvB,EAAEsL,MAAO,KAAOzH,EAAS7B,IACzB,IAAI9E,EAAW8C,EAAEE,GAAKF,EAAEE,EAAE,KAAQ8B,GAAKT,GAAoBS,EAAIT,GAC7DvB,EAAEgB,GAAMgB,EAAI,EAAI,EAAI,EAAA,GACpBhC,IAeV0E,EAAEkH,WAAalH,EAAEmH,KAAO,WACpB,IAAIpI,EAAGzD,EAAGiC,EAAG6J,EAAKd,EACd3K,EAAI9K,KACJ2K,EAAIG,EAAEH,EACNc,EAAIX,EAAEW,EACNb,EAAIE,EAAEF,EACNiC,EAAKzB,EAAiB,EACtBoL,EAAO,IAAI7O,EAAU,OAGzB,GAAW,IAAN8D,IAAYd,IAAMA,EAAE,GACrB,OAAO,IAAIhD,GAAY8D,GAAKA,EAAI,KAAQd,GAAKA,EAAE,IAAO4I,IAAM5I,EAAIG,EAAI,EAAA,GA8BxE,GAtBU,IAJVW,EAAI8F,KAAK+E,MAAOxL,KAIDW,GAAK,EAAA,KAChBhB,EAAI2C,EAAczC,IACTjK,OAASkK,GAAM,GAAK,IAAIH,GAAK,KACtCgB,EAAI8F,KAAK+E,KAAK7L,GACdG,EAAI4I,GAAY5I,EAAI,GAAM,IAAQA,EAAI,GAAKA,EAAI,GAS/C8B,EAAI,IAAI/E,EANJ8C,EADCgB,GAAK,EAAA,EACF,KAAOb,GAEXH,EAAIgB,EAAEsC,iBACApM,MAAO,EAAG8I,EAAEhD,QAAQ,KAAO,GAAMmD,IAK3C8B,EAAI,IAAI/E,EAAW8D,EAAI,IAOtBiB,EAAE/B,EAAE,GAML,KAJAc,GADAb,EAAI8B,EAAE9B,GACEiC,GACC,IAAIpB,EAAI,KAOb,GAHAgK,EAAI/I,EACJA,EAAI8J,EAAKT,MAAON,EAAE/L,KAAM4D,EAAKxC,EAAG2K,EAAG5I,EAAI,KAElCO,EAAeqI,EAAE9K,GAAMhJ,MAAO,EAAG8J,MAAUhB,EAC3C2C,EAAeV,EAAE/B,IAAMhJ,MAAO,EAAG8J,GAAM,CAWxC,GANKiB,EAAE9B,EAAIA,KAAMa,EAMP,SALVhB,EAAIA,EAAE9I,MAAO8J,EAAI,EAAGA,EAAI,MAKH8K,GAAY,QAAL9L,GAgBrB,EAIIA,KAAOA,EAAE9I,MAAM,IAAqB,KAAf8I,EAAE8C,OAAO,MAGjCpC,EAAOuB,EAAGA,EAAE9B,EAAIQ,EAAiB,EAAG,GACpC8C,GAAKxB,EAAEqJ,MAAMrJ,GAAGgI,GAAG5J,IAGvB,MAvBA,IAAMyL,IACFpL,EAAOsK,EAAGA,EAAE7K,EAAIQ,EAAiB,EAAG,GAE/BqK,EAAEM,MAAMN,GAAGf,GAAG5J,IAAK,CACpB4B,EAAI+I,EACJ,MAIR5I,GAAM,EACNpB,GAAK,EACL8K,EAAM,EAkBtB,OAAOpL,EAAOuB,EAAGA,EAAE9B,EAAIQ,EAAiB,EAAGC,EAAe6C,IAwB9DiB,EAAE4G,MAAQ5G,EAAEsH,IAAM,SAAW7J,EAAGlC,GAC5B,IAAIC,EAAGC,EAAGzI,EAAGqM,EAAG/B,EAAGyB,EAAGwI,EAAK5E,EAAKC,EAAK4E,EAAKC,EAAKC,EAAKC,EAChDlF,EAAMmF,EACNjM,EAAI9K,KACJ2M,EAAK7B,EAAEH,EACP2I,GAAOpI,EAAK,GAAI0B,EAAI,IAAIjF,EAAWiF,EAAGlC,IAAMC,EAGhD,KAAMgC,GAAO2G,GAAO3G,EAAG,IAAO2G,EAAG,IAmB7B,OAhBMxI,EAAEW,IAAMmB,EAAEnB,GAAKkB,IAAOA,EAAG,KAAO2G,GAAMA,IAAOA,EAAG,KAAO3G,EACzDC,EAAEjC,EAAIiC,EAAEhC,EAAIgC,EAAEnB,EAAI,MAElBmB,EAAEnB,GAAKX,EAAEW,EAGHkB,GAAO2G,GAKT1G,EAAEjC,GAAK,GACPiC,EAAEhC,EAAI,GALNgC,EAAEjC,EAAIiC,EAAEhC,EAAI,MASbgC,EAYX,IATAhC,EAAI4I,EAAU1I,EAAEF,EAAIwB,GAAaoH,EAAU5G,EAAEhC,EAAIwB,GACjDQ,EAAEnB,GAAKX,EAAEW,GACTiL,EAAM/J,EAAGjM,SACTiW,EAAMrD,EAAG5S,UAGQoW,EAAKnK,EAAIA,EAAK2G,EAAIA,EAAKwD,EAAI3U,EAAIuU,EAAKA,EAAMC,EAAKA,EAAMxU,GAGhEA,EAAIuU,EAAMC,EAAKG,KAAS3U,IAAK2U,EAAG1Q,KAAK,IAK3C,IAHAwL,EAAO1C,EACP6H,EAAW7E,EAEL/P,EAAIwU,IAAOxU,GAAK,GAAK,CAKvB,IAJAwI,EAAI,EACJiM,EAAMtD,EAAGnR,GAAK4U,EACdF,EAAMvD,EAAGnR,GAAK4U,EAAW,EAEVvI,EAAIrM,GAAbsK,EAAIiK,GAAgBlI,EAAIrM,GAK1BwI,IADAmH,EAAM8E,GAHN9E,EAAMnF,IAAKF,GAAKsK,IAEhB7I,EAAI2I,EAAM/E,GADVC,EAAMpF,EAAGF,GAAKsK,EAAW,GACHH,GACIG,EAAaA,EAAaD,EAAGtI,GAAK7D,GAChDiH,EAAO,IAAQ1D,EAAI6I,EAAW,GAAMF,EAAM9E,EACtD+E,EAAGtI,KAAOsD,EAAMF,EAGpBkF,EAAGtI,GAAK7D,EASZ,OANIA,IACEC,EAEFkM,EAAGzQ,OAAO,EAAG,GAGVkI,EAAW3B,EAAGkK,EAAIlM,IAgB7BuE,EAAE6H,SAAW,SAAWrI,EAAI7B,GACxB,IAAIrC,EAAI,IAAI9C,EAAU3H,MAGtB,OAFA2O,EAAW,MAANA,GAAe1D,EAAY0D,EAAI,EAAGkC,EAAK,GAAI,aAA4B,EAALlC,EAAP,KAChE7B,EAAW,MAANA,GAAe7B,EAAY6B,EAAI,EAAG,EAAG,GAAIc,GAAsC,EAALd,EAAhBzB,EACxDsD,EAAKxD,EAAOV,EAAGkE,EAAI7B,GAAOrC,GAgBrC0E,EAAEpB,cAAgB,SAAWlB,EAAIC,GAC7B,OAAOU,EAAQxN,KACP,MAAN6M,GAAc5B,EAAY4B,EAAI,EAAGgE,EAAK,IAAc,IAALhE,EAAS,KAAMC,EAAI,KAmBxEqC,EAAEzH,QAAU,SAAWmF,EAAIC,GACvB,OAAOU,EAAQxN,KAAY,MAAN6M,GAAc5B,EAAY4B,EAAI,EAAGgE,EAAK,MACrDhE,EAAK7M,KAAK4K,EAAI,EAAI,KAAMkC,EAAI,KA0BtCqC,EAAE8H,SAAW,SAAWpK,EAAIC,GACxB,IAAI1F,EAAMoG,EAAQxN,KAAY,MAAN6M,GAAc5B,EAAY4B,EAAI,EAAGgE,EAAK,MACxDhE,EAAK7M,KAAK4K,EAAI,EAAI,KAAMkC,EAAI,IAElC,GAAK9M,KAAK2K,EAAI,CACV,IAAIxI,EACAF,EAAMmF,EAAI8P,MAAM,KAChBC,GAAM3H,EAAOG,UACbyH,GAAM5H,EAAOI,mBACbF,EAAiBF,EAAOE,eACxB2H,EAAUpV,EAAI,GACdqV,EAAerV,EAAI,GACnBkT,EAAQnV,KAAKyL,EAAI,EACjB8L,EAAYpC,EAAQkC,EAAQ1V,MAAM,GAAK0V,EACvCxM,EAAM0M,EAAU7W,OAIpB,GAFI0W,IAAIjV,EAAIgV,EAAIA,EAAKC,EAAIA,EAAKjV,EAAG0I,GAAO1I,GAEnCgV,EAAK,GAAKtM,EAAM,EAAI,CAIrB,IAHA1I,EAAI0I,EAAMsM,GAAMA,EAChBE,EAAUE,EAAUC,OAAQ,EAAGrV,GAEvBA,EAAI0I,EAAK1I,GAAKgV,EAClBE,GAAW3H,EAAiB6H,EAAUC,OAAQrV,EAAGgV,GAGhDC,EAAK,IAAIC,GAAW3H,EAAiB6H,EAAU5V,MAAMQ,IACtDgT,IAAOkC,EAAU,IAAMA,GAG/BjQ,EAAMkQ,EACFD,EAAU7H,EAAOC,mBAAuB2H,GAAM5H,EAAOM,mBACnDwH,EAAa1P,QAAS,IAAI0D,OAAQ,OAAS8L,EAAK,OAAQ,KACxD,KAAO5H,EAAOK,wBACdyH,GACFD,EAGR,OAAOjQ,GAgBX+H,EAAEsI,WAAa,SAAUC,GACrB,IAAIzV,EAAK0V,EAAIC,EAAIhN,EAAGiN,EAAKpN,EAAGqN,EAAIlF,EAAGnH,EAC/BgB,EAAI1B,EACJD,EAAI9K,KACJ2M,EAAK7B,EAAEH,EACP6B,EAAI,IAAI7E,EAAUyH,GAClB2I,EAAKJ,EAAK,IAAIhQ,EAAUyH,GACxB4I,EAAKF,EAAK,IAAInQ,EAAUyH,GAoB5B,GAlBW,MAANsI,IACD3M,GAAS,EACTN,EAAI,IAAI9C,EAAU+P,GAClB3M,EAAS0B,GAEDA,EAAIhC,EAAEwK,WAAaxK,EAAE0G,GAAG/B,KAExBrE,GACAC,EAAO,GACL,oBAAuByB,EAAI,eAAiB,kBAAoBiL,GAKtEA,GAAMjL,GAAKhC,EAAEE,GAAKQ,EAAOV,EAAGA,EAAEG,EAAI,EAAG,GAAIkK,IAAI1F,GAAO3E,EAAI,QAI1DkC,EAAK,OAAO7B,EAAE+C,WAgBpB,IAfApC,EAAI2B,EAAcT,GAIlB/B,EAAI4B,EAAE5B,EAAIa,EAAE/K,OAASoK,EAAEF,EAAI,EAC3B4B,EAAE7B,EAAE,GAAKoE,GAAY8I,EAAMjN,EAAIwB,GAAa,EAAIA,EAAWyL,EAAMA,GACjEH,GAAMA,GAAMjN,EAAE8H,IAAI/F,GAAK,EAAM5B,EAAI,EAAI4B,EAAIuL,EAAOtN,EAEhDoN,EAAM3L,EACNA,EAAU,EAAA,EACVzB,EAAI,IAAI9C,EAAU8D,GAGlBqM,EAAGnN,EAAE,GAAK,EAGNiI,EAAItF,EAAK7C,EAAG+B,EAAG,EAAG,GAEC,IADnBoL,EAAKD,EAAGjO,KAAMkJ,EAAEmD,MAAMiC,KACdzF,IAAImF,IACZC,EAAKK,EACLA,EAAKJ,EACLG,EAAKD,EAAGpO,KAAMkJ,EAAEmD,MAAO6B,EAAKG,IAC5BD,EAAKF,EACLpL,EAAI/B,EAAEb,MAAOgJ,EAAEmD,MAAO6B,EAAKpL,IAC3B/B,EAAImN,EAgBR,OAbAA,EAAKtK,EAAKoK,EAAG9N,MAAM+N,GAAKK,EAAI,EAAG,GAC/BF,EAAKA,EAAGpO,KAAMkO,EAAG7B,MAAMgC,IACvBJ,EAAKA,EAAGjO,KAAMkO,EAAG7B,MAAMiC,IACvBF,EAAGrM,EAAIsM,EAAGtM,EAAIX,EAAEW,EAChBb,GAAK,EAGL3I,EAAMqL,EAAKyK,EAAIC,EAAIpN,EAAGS,GAAgBzB,MAAMkB,GAAGoJ,MAAM3B,IAC/CjF,EAAKwK,EAAIH,EAAI/M,EAAGS,GAAgBzB,MAAMkB,GAAGoJ,OAAU,GAC7C6D,EAAGlK,WAAYmK,EAAGnK,aAClBiK,EAAGjK,WAAY8J,EAAG9J,YAE9B3B,EAAU2L,EACH5V,GAOXkN,EAAEjH,SAAW,WACT,OAAQlI,MAsBZmP,EAAE8I,QAAU9I,EAAElC,IAAM,SAAWxC,EAAGyD,GAC9B,IAAIzB,EAAGG,EAAGwJ,EACNjU,EAAI8J,EAAWxB,EAAI,GAAKA,GAAKA,GAC7BK,EAAI9K,KAQR,GANU,MAALkO,IACDhD,EAAK,GACLgD,EAAI,IAAIvG,EAAUuG,KAIhBjD,EAAYR,GAAIuB,EAAkBA,EAAkB,GAAI,eACzD+I,SAAStK,IAAMtI,EAAI6J,IAAsBvB,GAAK,IAC/CyN,WAAWzN,IAAMA,KAAQA,EAAI8I,OAAgB,GAAL9I,EAExC,OADAgC,EAAI8E,KAAKtE,KAAMnC,EAAGL,GACX,IAAI9C,EAAWuG,EAAIzB,EAAIyB,EAAIzB,GAuBtC,IApBIyB,EACKzD,EAAI,GAAKK,EAAEsG,GAAGhC,IAAQtE,EAAEmK,SAAW/G,EAAEkD,GAAGhC,IAAQlB,EAAE+G,QACnDnK,EAAIA,EAAEgL,IAAI5H,IAEVkI,EAAIlI,EAGJA,EAAI,MAEDlB,IAMPP,EAAIwC,EAAUjC,EAAgBZ,EAAW,IAG7CQ,EAAI,IAAIjF,EAAUyH,KAEN,CACR,GAAKjN,EAAI,EAAI,CAET,KADAyK,EAAIA,EAAEmJ,MAAMjL,IACJH,EAAI,MACR8B,EACKG,EAAEjC,EAAEjK,OAAS+L,IAAIG,EAAEjC,EAAEjK,OAAS+L,GAC5ByB,IACPtB,EAAIA,EAAEkJ,IAAI5H,IAKlB,KADA/L,EAAI8J,EAAW9J,EAAI,IACT,MACV2I,EAAIA,EAAEiL,MAAMjL,GACR2B,EACK3B,EAAEH,GAAKG,EAAEH,EAAEjK,OAAS+L,IAAI3B,EAAEH,EAAEjK,OAAS+L,GACnCyB,IACPpD,EAAIA,EAAEgL,IAAI5H,IAIlB,OAAIA,EAAUtB,GACTnC,EAAI,IAAImC,EAAIwC,EAAI9B,IAAIV,IAElBwJ,EAAIxJ,EAAEkJ,IAAIM,GAAK3J,EAAItB,EAAOyB,EAAGI,EAAe3B,GAAkBuB,IAkBzEuC,EAAEgJ,YAAc,SAAWxJ,EAAI7B,GAC3B,OAAOU,EAAQxN,KAAY,MAAN2O,GAAc1D,EAAY0D,EAAI,EAAGkC,EAAK,GAAI,aACtD,EAALlC,EAAS,KAAM7B,EAAI,KAgB3BqC,EAAEtB,SAAW,SAAUnD,GACnB,IAAItD,EACAqD,EAAIzK,KACJyL,EAAIhB,EAAEgB,EACNb,EAAIH,EAAEG,EAyBV,OAtBW,OAANA,EAEGa,GACArE,EAAM,WACDqE,EAAI,IAAIrE,EAAM,IAAMA,IAEzBA,EAAM,OAGVA,EAAMgG,EAAe3C,EAAEE,GAOnBvD,EALM,MAALsD,GAAcO,EAAYP,EAAG,EAAG,GAAI,GAAI,QAKnCkB,EAAauB,EAAc/F,EAAKwD,GAAS,EAAJF,EAAO,GAAIe,GAJhDb,GAAKkD,GAAclD,GAAKyE,EAC1BtB,EAAe3G,EAAKwD,GACpBuC,EAAc/F,EAAKwD,GAKtBa,EAAI,GAAKhB,EAAEE,EAAE,KAAKvD,EAAM,IAAMA,IAGhCA,GAQX+H,EAAExF,UAAYwF,EAAEiJ,MAAQ,WACpB,OAAOjN,EAAO,IAAIxD,EAAU3H,MAAOA,KAAK4K,EAAI,EAAG,IAQnDuE,EAAEkJ,QAAUlJ,EAAEmJ,OAAS,WACnB,IAAIlR,EACAqD,EAAIzK,KACJ4K,EAAIH,EAAEG,EAEV,OAAW,OAANA,EAAoBH,EAAEoD,YAE3BzG,EAAMgG,EAAe3C,EAAEE,GAEvBvD,EAAMwD,GAAKkD,GAAclD,GAAKyE,EACxBtB,EAAe3G,EAAKwD,GACpBuC,EAAc/F,EAAKwD,GAElBH,EAAEgB,EAAI,EAAI,IAAMrE,EAAMA,IAIjC+H,EAAEoJ,aAAc,EAED,MAAV/N,GAAiB7C,EAAU6C,OAAOA,GAEhC7C,EAOX,SAAS6L,EAAS/I,GACd,IAAItI,EAAQ,EAAJsI,EACR,OAAOA,EAAI,GAAKA,IAAMtI,EAAIA,EAAIA,EAAI,EAKtC,SAASiL,EAAcuD,GAMnB,IALA,IAAIlF,EAAG2K,EACHjU,EAAI,EACJqM,EAAImC,EAAEjQ,OACNgM,EAAIiE,EAAE,GAAK,GAEPxO,EAAIqM,GAAK,CAGb,IAFA/C,EAAIkF,EAAExO,KAAO,GACbiU,EAAIhK,EAAWX,EAAE/K,OACT0V,IAAK3K,EAAI,IAAMA,GACvBiB,GAAKjB,EAIT,IAAM+C,EAAI9B,EAAEhM,OAA8B,KAAtBgM,EAAEf,aAAa6C,KACnC,OAAO9B,EAAE/K,MAAO,EAAG6M,EAAI,GAAK,GAKhC,SAAS4D,EAAStH,EAAG8B,GACjB,IAAI+D,EAAGjG,EACHiC,EAAK7B,EAAEH,EACP2I,EAAK1G,EAAEjC,EACPxI,EAAI2I,EAAEW,EACN+C,EAAI5B,EAAEnB,EACNgB,EAAI3B,EAAEF,EACNnI,EAAImK,EAAEhC,EAGV,IAAMzI,IAAMqM,EAAI,OAAO,KAMvB,GAJAmC,EAAIhE,IAAOA,EAAG,GACdjC,EAAI4I,IAAOA,EAAG,GAGT3C,GAAKjG,EAAI,OAAOiG,EAAIjG,EAAI,GAAK8D,EAAIrM,EAGtC,GAAKA,GAAKqM,EAAI,OAAOrM,EAMrB,GAJAwO,EAAIxO,EAAI,EACRuI,EAAI+B,GAAKhK,GAGHkK,IAAO2G,EAAK,OAAO5I,EAAI,GAAKiC,EAAKgE,EAAI,GAAK,EAGhD,IAAMjG,EAAI,OAAO+B,EAAIhK,EAAIkO,EAAI,GAAK,EAKlC,IAHAnC,GAAM/B,EAAIE,EAAGjM,SAAa+B,EAAI6Q,EAAG5S,QAAW+L,EAAIhK,EAG1CN,EAAI,EAAGA,EAAIqM,EAAGrM,IAAM,GAAKwK,EAAGxK,IAAMmR,EAAGnR,GAAK,OAAOwK,EAAGxK,GAAKmR,EAAGnR,GAAKwO,EAAI,GAAK,EAGhF,OAAOlE,GAAKhK,EAAI,EAAIgK,EAAIhK,EAAIkO,EAAI,GAAK,EASzC,SAASG,EAAsBrG,EAAG2D,EAAKC,GACnC,OAAS5D,EAAI6D,EAAS7D,KAAQ2D,GAAO3D,GAAK4D,EAI9C,SAASnM,EAAQa,GACb,MAA8C,kBAAvC7B,OAAO2B,UAAUgL,SAAS3N,KAAK6C,GAS1C,SAASmK,EAAW9F,EAAKkF,EAAQD,GAO7B,IANA,IAAImC,EAEAgK,EADAvW,GAAO,GAEPE,EAAI,EACJ0I,EAAMzD,EAAI1G,OAENyB,EAAI0I,GAAO,CACf,IAAM2N,EAAOvW,EAAIvB,OAAQ8X,IAAQvW,EAAIuW,IAASlM,GAG9C,IAFArK,EAAKuM,EAAI,IAAOjD,EAAS9D,QAASL,EAAImG,OAAQpL,MAEtCqM,EAAIvM,EAAIvB,OAAQ8N,IAEfvM,EAAIuM,GAAKnC,EAAU,IACD,MAAdpK,EAAIuM,EAAI,KAAavM,EAAIuM,EAAI,GAAK,GACvCvM,EAAIuM,EAAI,IAAMvM,EAAIuM,GAAKnC,EAAU,EACjCpK,EAAIuM,IAAMnC,GAKtB,OAAOpK,EAAIL,UAIf,SAASmM,EAAe3G,EAAKwD,GACzB,OAASxD,EAAI1G,OAAS,EAAI0G,EAAImG,OAAO,GAAK,IAAMnG,EAAIzF,MAAM,GAAKyF,IAC3DwD,EAAI,EAAI,IAAM,MAASA,EAI/B,SAASuC,EAAc/F,EAAKwD,GACxB,IAAIC,EAAKuL,EAGT,GAAKxL,EAAI,EAAI,CAGT,IAAMwL,EAAI,OAAQxL,EAAGwL,GAAK,KAC1BhP,EAAMgP,EAAIhP,OAOV,GAHAyD,EAAMzD,EAAI1G,SAGHkK,EAAIC,EAAM,CACb,IAAMuL,EAAI,IAAKxL,GAAKC,IAAOD,EAAGwL,GAAK,KACnChP,GAAOgP,OACCxL,EAAIC,IACZzD,EAAMA,EAAIzF,MAAO,EAAGiJ,GAAM,IAAMxD,EAAIzF,MAAMiJ,IAIlD,OAAOxD,EAIX,SAASkH,EAAS7D,GAEd,OADAA,EAAIyN,WAAWzN,IACJ,EAAIwE,EAASxE,GAAKwB,EAAUxB,GAvoF3C,IAAI9C,EACAkE,EAAY,uCACZoD,EAAWsC,KAAK4C,KAChBlI,EAAYsF,KAAKoD,MACjB5D,EAAU,iCACVnD,EAAe,gBACflC,EAAgB,kDAChBH,EAAW,mEACX2D,EAAO,KACP9C,EAAW,GACXJ,EAAmB,iBAEnB+C,GAAY,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MAC7EmD,EAAY,IAOZrB,EAAM,KA0nFVlJ,EAAY4C,KACO,QAAI5C,EAAUA,UAAYA,EAQD8Q,EAAOC,QAC/CD,UAAiB9Q,GAIX2C,IAAYA,EAA2B,oBAARqO,KAAsBA,KAAOC,SAAS,kBAC3EtO,EAAU3C,UAAYA,IAE3B3H,KT5qFCG,EAAiBe,OAAOf,eCDxB0Y,EAA4B,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAwB,SAAUhW,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,mBAAX+V,QAAyB/V,EAAIiB,cAAgB8U,QAAU/V,IAAQ+V,OAAOjW,UAAY,gBAAkBE,GAsDlQG,EAA2BhC,OAAOgC,yBAClC8V,EAAsB9X,OAAO8X,oBAC7BC,EAAwB/X,OAAO+X,sBAkFxBhW,GArDC+G,EAAS,SAASkP,IAC5B/X,EAAgBnB,KAAMkZ,GAEtBnY,EAAgBf,KAAM,qBAAsBiK,EAAajK,MAEzDe,EAAgBf,KAAM,qBAAsBkK,EAAclK,MAE1De,EAAgBf,KAAM,6BAA8BmK,EAAcnK,MAElEe,EAAgBf,KAAM,uBAAwBoK,EAAcpK,MAE5De,EAAgBf,KAAM,iBAAkBqK,EAAcrK,OACpDiK,EAAc1I,EAA0ByI,EAAOnH,UAAW,sBAAuBtC,IACnFX,YAAY,EACZC,YAAa,WACX,YAEAqK,EAAe3I,EAA0ByI,EAAOnH,UAAW,sBAAuBtC,IACpFX,YAAY,EACZC,YAAa,WACX,YAEAsK,EAAe5I,EAA0ByI,EAAOnH,UAAW,8BAA+BtC,IAC5FX,YAAY,EACZC,YAAa,WACX,YAEAuK,EAAe7I,EAA0ByI,EAAOnH,UAAW,wBAAyBtC,IACtFX,YAAY,EACZC,YAAa,WACX,OAAO,QAEPwK,EAAe9I,EAA0ByI,EAAOnH,UAAW,kBAAmBtC,IAChFX,YAAY,EACZC,YAAa,WACX,OAAO,QAkBaoZ,EAAwB,SAAUE,GACxD,OAAOH,EAAoBG,GAAQvW,OAAOqW,EAAsBE,KAC9DH,GAoCO5U,EACiE,YAAlD,oBAAZgV,QAA0B,YAAcP,EAAQO,WAA2BA,SAAmC,mBAAjBA,QAAQhV,KAGxGhB,EAAKgW,QAAQhV,KAAMgV,SAFnB,aClLPP,EAA4B,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAwB,SAAUhW,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,mBAAX+V,QAAyB/V,EAAIiB,cAAgB8U,QAAU/V,IAAQ+V,OAAOjW,UAAY,gBAAkBE,GAElQsW,GAAe,WAAc,SAASC,EAAiB9Z,EAAQ+Z,GAAS,IAAK,IAAIpX,EAAI,EAAGA,EAAIoX,EAAM7Y,OAAQyB,IAAK,CAAE,IAAIzC,EAAa6Z,EAAMpX,GAAIzC,EAAWE,WAAaF,EAAWE,aAAc,EAAOF,EAAWC,cAAe,EAAU,UAAWD,IAAYA,EAAWU,UAAW,GAAMc,OAAOf,eAAeX,EAAQE,EAAWD,IAAKC,IAAiB,OAAO,SAAU2B,EAAamY,EAAYC,GAAiJ,OAA9HD,GAAYF,EAAiBjY,EAAYwB,UAAW2W,GAAiBC,GAAaH,EAAiBjY,EAAaoY,GAAqBpY,MAO5hBqY,GAAkB,kFCTlBvV,IDWsB,WA8ExB,SAASwV,EAAoBC,EAAaC,EAAYC,EAAkBC,GACtE5Y,EAAgBnB,KAAM2Z,GAEtB3Z,KAAK4Z,YAAcA,EACnB5Z,KAAK6Z,WAAaA,EAClB7Z,KAAK8Z,iBAAmBA,EACxB9Z,KAAK+Z,gBAAkBA,EAnFzBV,GAAaM,IACXla,IAAK,YACLK,MAAO,SAAmBJ,GACxB,YAAmBqC,IAAfrC,EACK,KAGL,UAAWA,EACNA,EAAWI,MAGhB,QAASJ,EACJA,EAAWK,IAGhB,QAASL,EACJA,EAAWW,SADpB,KAKFZ,IAAK,yBACLK,MAAO,SAAgCka,GACrC,YAAyB,IAAVA,EAAwB,YAAcnB,EAAQmB,IAC3D,IAAK,WACH,OAAOha,KAAKia,0BAA0BD,GACxC,QACE,OAAOha,KAAKP,QAIlBA,IAAK,4BACLK,MAAO,SAAmCuD,GACxC,IAAI6W,EAAQla,KAEZ,OAAOqD,EAAGwK,WAAWjG,QAAQ8R,GAAiB,SAAUS,GAGtD,OAFW1Z,UAAUC,OAAS,QAAsBqB,IAAjBtB,UAAU,GAAmBA,UAAU,GAAKyZ,EAAMza,KACxEgB,UAAU,QAK3BhB,IAAK,MACLM,IAAK,WACH,OAAOC,KAAK+Z,gBAAgBta,OAG9BA,IAAK,iBACLM,IAAK,WACH,OAAOC,KAAK4Z,YAAY5V,YAAYC,KAAO,IAAMjE,KAAKoa,2BAGxD3a,IAAK,gBACLM,IAAK,WACH,OAAOC,KAAK6Z,WAAW7V,YAAYC,KAAO,IAAMjE,KAAKqa,0BAGvD5a,IAAK,cACLM,IAAK,WACH,OAAOC,KAAKsa,UAAUta,KAAK8Z,qBAG7Bra,IAAK,aACLM,IAAK,WACH,OAAOC,KAAKsa,UAAUta,KAAK+Z,oBAG7Bta,IAAK,0BACLM,IAAK,WACH,OAAOC,KAAKua,uBAAuBva,KAAKwa,gBAG1C/a,IAAK,yBACLM,IAAK,WACH,OAAOC,KAAKua,uBAAuBva,KAAKya,gBAa5CpB,GAAaM,IACXla,IAAK,SACLK,MAAO,SAAgB4a,GACrB,IAAIhX,EAAMjD,UAAUC,OAAS,QAAsBqB,IAAjBtB,UAAU,GAAmBA,UAAU,GAAK,IAE5D,IAAdia,GACF1a,KAAK0O,MAhGgB,8CAgGehL,MAIxCjE,IAAK,QACLK,MAAO,SAAe4D,GACpB,IAAIiX,EAAS3a,KAUb,MARA0D,EAAMA,EAGLkE,QAAQ,WAAY,SAAUsG,GAC7B,OAAOyM,EAAOC,iBACbhT,QAAQ,UAAW,SAAUsG,GAC9B,OAAOyM,EAAOE,gBAEV,IAAI/W,YAAYJ,UCxHbxC,OAAO4Z,QAAU,SAAUtb,GAAU,IAAK,IAAI2C,EAAI,EAAGA,EAAI1B,UAAUC,OAAQyB,IAAK,CAAE,IAAI4Y,EAASta,UAAU0B,GAAI,IAAK,IAAI1C,KAAOsb,EAAc7Z,OAAO2B,UAAUN,eAAerC,KAAK6a,EAAQtb,KAAQD,EAAOC,GAAOsb,EAAOtb,IAAY,OAAOD,IAEnPgE,GAAiB,WAAc,SAASwX,EAAc/Y,EAAKE,GAAK,IAAI8Y,KAAeC,GAAK,EAAUC,GAAK,EAAWC,OAAKrZ,EAAW,IAAM,IAAK,IAAiCsZ,EAA7BC,EAAKrZ,EAAI6W,OAAOC,cAAmBmC,GAAMG,EAAKC,EAAGC,QAAQC,QAAoBP,EAAK7U,KAAKiV,EAAGvb,QAAYqC,GAAK8Y,EAAKva,SAAWyB,GAA3D+Y,GAAK,IAAoE,MAAOO,GAAON,GAAK,EAAMC,EAAKK,UAAiB,KAAWP,GAAMI,EAAW,QAAGA,EAAW,iBAAiB,GAAIH,EAAI,MAAMC,GAAQ,OAAOH,EAAQ,OAAO,SAAUhZ,EAAKE,GAAK,GAAIvB,MAAMsB,QAAQD,GAAQ,OAAOA,EAAY,GAAI6W,OAAOC,YAAY7X,OAAOe,GAAQ,OAAO+Y,EAAc/Y,EAAKE,GAAa,MAAM,IAAIb,UAAU,4DAIllBqC,GAAc,oDCHdxD,GAAiBe,OAAOf,eACxB2E,GAAiB5D,OAAO4D,eAGxBN,QAAW,ECFXrE,GAAiBe,OAAOf,eKCxBub,MAIItC,QAAQuC,MAAOvC,QAAQuC,KAAKvY,KAAKgW,SAG9BA,QAAQwC,SAAUxC,QAAQwC,QAAQxY,KAAKgW,SCHvCA,QAAQyC,SAAUzY,EAAKgW,QAAQyC,QAASzC,SACrCA,QAAQ0C,YAAa1Y,EAAKgW,QAAQ0C,WAAY1C,SLH5D7T,EAAQ1C,UAAU9C,IAAM,SAASN,GAChC,IAAImJ,EAEJ,OAAI5I,KAAKyF,UAAYzF,KAAKkG,QAAQlG,KAAKyF,SAAShG,IAAKA,GAC7CO,KAAKyF,SAASgJ,KAGtB7F,EAAQ5I,KAAKyH,QAAQhI,KACR,GACZO,KAAKyF,SAAWzF,KAAKwF,KAAKoD,GACnB5I,KAAKwF,KAAKoD,GAAO6F,UAFzB,GAQDlJ,EAAQ1C,UAAUxC,IAAM,SAASZ,EAAKgP,GACrC,IAAI7F,EAEJ,OAAI5I,KAAKyF,UAAYzF,KAAKkG,QAAQlG,KAAKyF,SAAShG,IAAKA,IACpDO,KAAKyF,SAASgJ,IAAMA,EACbzO,OAGR4I,EAAQ5I,KAAKyH,QAAQhI,KACR,GACZO,KAAKyF,SAAWzF,KAAKwF,KAAKoD,GAC1B5I,KAAKwF,KAAKoD,GAAO6F,IAAMA,EAChBzO,OAGRA,KAAKyF,UAAahG,IAAKA,EAAKgP,IAAKA,GACjCzO,KAAKwF,KAAKY,KAAKpG,KAAKyF,UACpBzF,KAAK0F,OAEE1F,OAGRuF,EAAQ1C,UAAU+D,OAAS,SAASnH,GACnC,IAAImJ,EAOJ,GALI5I,KAAKyF,UAAYzF,KAAKkG,QAAQlG,KAAKyF,SAAShG,IAAKA,KACpDO,KAAKyF,cAAW1D,IAGjB6G,EAAQ5I,KAAKyH,QAAQhI,KACR,EAEZ,OADAO,KAAK0F,OACE1F,KAAKwF,KAAKa,OAAOuC,EAAO,GAAG,IAQpCrD,EAAQ1C,UAAU4B,IAAM,SAAShF,GAChC,IAAImJ,EAEJ,SAAI5I,KAAKyF,WAAYzF,KAAKkG,QAAQlG,KAAKyF,SAAShG,IAAKA,MAIrDmJ,EAAQ5I,KAAKyH,QAAQhI,KACR,IACZO,KAAKyF,SAAWzF,KAAKwF,KAAKoD,IACnB,IAMTrD,EAAQ1C,UAAUnB,QAAU,SAASqa,EAAUC,GAC9C,IAAI7Z,EACJ,IAAKA,EAAI,EAAGA,EAAInC,KAAK0F,KAAMvD,IAC1B4Z,EAAS7b,KAAK8b,GAAWhc,KAAMA,KAAKwF,KAAKrD,GAAGsM,IAAKzO,KAAKwF,KAAKrD,GAAG1C,IAAKO,OAIrEuF,EAAQ1C,UAAU4E,QAAU,SAAShI,GACpC,IAAI0C,EACJ,IAAKA,EAAI,EAAGA,EAAInC,KAAK0F,KAAMvD,IAC1B,GAAInC,KAAKkG,QAAQlG,KAAKwF,KAAKrD,GAAG1C,IAAKA,GAClC,OAAO0C,EAGT,OAAQ,GAIToD,EAAQ1C,UAAUqD,QAAU,SAASW,EAAMC,GAC1C,OAAOD,IAASC,GAASD,IAASA,GAAQC,IAASA,GAGpD,sBAAiBvB,KMtGA,SAAS0W,GACzB,MAAmB,mBAARC,KAAsBD,EAEzB,IADOE,GAIP,IAAID,QLJI,SAAUE,GAC1B,IAAIC,EAAQ,IAAIC,GAA0D,SAA7C,KAAYC,8BACxC3W,KAED,OAAO,SAAUvC,GAChB,IAAImZ,EAAe,WAClB,IACCC,EACAC,EAIAva,EANGwa,EAAeN,EAGlBO,EAAqBnc,UAAUC,OAAS,EACxCmF,EAAUjF,MAAMgc,EAAqB,GACrCC,GAAa,EAGd,IAAKL,EAAaM,SAAoC,IAAzBN,EAAaM,UAAkBN,EAAaM,UAAYF,EAAqB,EACzG,MAAM,IAAIrY,MAAM,oFAIjB,IAAKpC,EAAI,EAAGA,EAAIya,EAAoBza,IACnC0D,EAAQ1D,IACPwE,UAAWgW,EACXxW,IAAK1F,UAAU0B,IAKZwa,EAAalY,IAAIhE,UAAU0B,IAC9Bwa,EAAeA,EAAa5c,IAAIU,UAAU0B,KAI3C0a,GAAa,EAGbJ,EAAS,IAAIH,GAA0D,SAA7C,KAAYC,8BACtCI,EAAatc,IAAII,UAAU0B,GAAIsa,GAC/BE,EAAeF,GAyChB,OArCII,IACCF,EAAalY,IAAIhE,UAAUmc,IAC9BF,EAAWC,EAAa5c,IAAIU,UAAUmc,IAGtCC,GAAa,GAKVA,IACJH,EAAWrZ,EAAGV,MAAM,KAAMlC,WAC1Bkc,EAAatc,IAAII,UAAUmc,GAAqBF,IAI7CN,EAAQ,IACXvW,EAAQ+W,IACPjW,UAAWgW,EACXxW,IAAK1F,UAAUmc,IAGZC,EACHlX,EAAoBC,EAAKC,GAGzBD,EAAIQ,KAAKP,GAGND,EAAIlF,OAAS0b,GAChB9V,EAAmBV,EAAIkE,UAIzB0S,EAAaO,YAAcF,EAC3BL,EAAaM,QAAUF,EAAqB,EAErCF,GAQR,OALAF,EAAaJ,MAAQA,EACrBI,EAAaO,aAAc,EAC3BP,EAAaH,MAAQA,EACrBG,EAAa5W,IAAMA,EAEZ4W,svCCnFT,GAAsB,oBAAXQ,OAELC,GAAWC,cAEXD,GAAWD,OAAOE,KAGxB,IAAMC,GAAgB,gEAEhBC,GAAqB,IACrB5V,GAAiB,GAcjBe,MACD,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACC,MACA,IAGAD,MACD,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACC,MACA,IA6FA+U,IACJ,cACA,UACA,WACA,UACA,SACA,WACA,aACA,aACA,kBACA,iBACA,aACA,cACA,aACA,YACA,cACA,gBACA,gBACA,qBACA,eACA,qBACA,iBACA,eACA,qBACA,cACA,+BAuECvc,EAASwc,GAAQ,SAkDjBxc,EAASwc,GAAQ,SLtQpB,WACE,IAAK,IAAI9c,EAAOC,UAAUC,OAAQC,EAAOC,MAAMJ,GAAOK,EAAO,EAAGA,EAAOL,EAAMK,IAC3EF,EAAKE,GAAQJ,UAAUI,GAGzB,OAAOC,EAASvB,EAAkBoB,IKgfvB,6BJzab,WACE,IAAK,IAAIH,EAAOC,UAAUC,OAAQC,EAAOC,MAAMJ,GAAOK,EAAO,EAAGA,EAAOL,EAAMK,IAC3EF,EAAKE,GAAQJ,UAAUI,GAGzB,OAAoB,IAAhBF,EAAKD,OACA,WACL,OAAOsE,EAAOvE,YAGTuE,EAAOrE,8BI4DJgQ,EAAGjG,EAAGC,EAAG6B,EAAG5B,EAAG2S,EAAGC,EAAGC,iBACd,iBAAN9M,OACJlH,MAAwBlC,EAAhBM,EAAW8I,GAAYA,EAAY,IAAIsM,GAAStM,GAAG0H,UAAY+E,SACvE,GAAyB,IAArB3c,UAAUC,YACd+I,MAAQlC,GAAO,IAAI0V,IAAW5E,UAAY+E,SAC1C,GAAyB,IAArB3c,UAAUC,UACfiQ,aAAa+M,OACVjU,MAAQkH,EAAElH,WACV,GAAIkH,aAAasM,QACjBxT,MAAQlC,EAAOoJ,EAAE0H,UAAY+E,QAC7B,CAAA,GAAiB,iBAANzM,QAOVpM,MAAM,6DANRoZ,EAAQP,OACLzM,GAAIlJ,QAAQ,MAAQ,MACjB,QAELgC,MAAQlC,EAAOoJ,EAAIgN,OAIrB,KACDC,WACa,kBAANjN,EACFsM,GAASY,IAAInT,EAAGC,GAAK,EAAG6B,GAAK,EAAG5B,GAAK,EAAG2S,GAAK,EAAGC,GAAK,EAAGC,GAAK,GAE7D,IAAIR,GAAStM,EAAGjG,EAAGC,GAAK,EAAG6B,GAAK,EAAG5B,GAAK,EAAG2S,GAAK,EAAGC,GAAK,QAE5D/T,MAAQlC,EAAOqW,EAAKvF,UAAY+E,YAGlCvT,kBAEY,iBAAN8G,GAAkBwM,GAAcrV,KAAK6I,IAAMA,EAAElJ,QAAQ,MAAQ,EAAG,KACnE0S,EAAQxJ,EAAEwJ,MAAMgD,YACE,IAAbhD,EAAM,GAAoB,KAC7B2D,EAAS5W,EAASiT,EAAM,GAAGvS,QAAQ,IAAK,IAAK,GAC/CmW,EAAQC,SAASF,EAAQ,IAGzBC,EAAQ,SACLE,gBAAgB1M,KAAKoD,MAAMoJ,EAAQX,QACxBA,IAIdW,EAAQ,SACLG,gBAAgB3M,KAAKoD,MAAMoJ,EAAQ,SACxB,KAIdA,EAAQ,QACLI,eAAe5M,KAAKoD,MAAMoJ,2EAOhCK,MAAQ,IAAInB,GAASjd,KAAKqY,cACZ3W,QAAQ,SAACuC,KACrBA,GAAQ,4BAAkBma,OAAMna,8BAGlCoa,6DAIS1N,EAAGjG,EAAG4T,MAChB3N,EAAE+D,GAAGhK,UAAa,IAAI/C,EAAU,WAChC4W,EAAO,IAAI5W,EAAU,GACnB6W,EAAO7N,EAAEQ,GAAGzG,GAAK,GAAK,EACxB+T,EAAQ,IAAI9W,EAAUgJ,IAClB8N,EAAM/J,GAAGhK,IAAI,KACb+D,EAAM6P,EAAKG,KACVF,EAAK7U,KAAK+E,KACTgQ,EAAM/U,KAAK8U,UAEdD,EAAKxI,MAAMyI,wCAGPhV,UACJA,EAAMxJ,KAAK0e,iBAAmB1e,KAAK2e,+CAGnCnV,UACAA,EAAMxJ,KAAK4e,aAAe5e,KAAK6e,4CAG9BrV,UACDA,EAAMxJ,KAAK8e,cAAgB9e,KAAK+e,4CAGhCC,OAAMxV,0DACPyV,EAAc,IAAItX,EAAU3H,KAAKkf,aAAa1V,IAChDoI,EAAO,IAAIjK,EAAUqX,GACrBG,EAAM,IAAIxX,EAAU3H,KAAKof,SAAS5V,IAAMI,MAAM,MAC9CoV,GAAQ,GAAI,KACRK,EAAQzN,EAAK2C,mBAAmB,IAChCkK,EAAQ,IAAI9W,EAAUsX,GACtBK,EAAMb,EAAM/U,KAAK2V,KACjBrf,KAAKuf,gBAAgBd,EAAOa,EAAKnX,KAChCyJ,EAAKlI,KAAK2V,EAAMtJ,MAAM,IAAIA,MAAMnE,EAAKyD,SAAS,GAAK,GAAK,QAG3DhN,EAAQ,IAAIV,EAAU3H,KAAKwf,UAAUhW,IACvCgV,EAAOnW,EAAMqB,KAAKkI,UAClB4M,EAAK5J,YAAY,QACZvM,EAAMuB,MAAMgI,IAGjB4M,EAAKnJ,SAAShN,GACT8W,EAAIzV,KAAK1J,KAAKuf,gBAAgBf,EAAMnW,EAAOD,EAAahF,KAAK,KAAM6b,KAErEE,EAAIzV,KAAK1J,KAAKuf,gBAAgBlX,EAAOmW,EAAMpW,EAAahF,KAAK,KAAM6b,uCAIlEjW,EAAOyW,EAAMT,OAAMxV,0DACrBkW,EAAU,IAAI/X,EAAUqX,UACtBS,OAvRC,cAyREzW,EAAMO,UAAUP,EAxRjB,QAwR+B0W,EAAQ3J,MAAM,IAAKvM,OAxRlD,eA0RCR,EAAMO,UAAUP,EAzRnB,MAyR+BA,EAAM2W,SAASD,EAASlW,GAAMA,OAzR7D,aA2RGR,EAAMO,UAAUP,EA1RlB,OA0R+B0W,EAAQ3J,MAAM,IAAKvM,OA1RlD,cA4RER,EAAMO,UAAUP,EA3RhB,SA2R+B0W,EAAQ3J,MAAM,IAAKvM,OA3RlD,gBA6RAR,EAAMO,UAAUP,EA5RhB,SA4R+B0W,EAAQ3J,MAAM,IAAKvM,OA5RlD,gBA8RAR,EAAMO,UAAUP,EA7RjB,QA6R+B0W,EAAQ3J,MAAM,KAAOvM,OA7RpD,eA+RCR,EAAMO,UAAUP,EA9RjB,QA8R+B0W,EAAQ3J,MAAM,KAAOvM,OA9RpD,eAgSCR,EAAMO,UAAUP,EA/RlB,OA+R+B0W,EAAQ3J,MAAM,KAAOvM,OA/RpD,sBAkSEkW,4CAiBJ1f,KAAKyJ,MAAMoE,oDAIX7N,KAAKyJ,MAAM6K,UAAU8I,IAAoBzT,YAAYzB,6DAIrDgQ,WAAclY,KAAKqY,cAAatR,EAAI/G,KAAK4f,mBAAsB,uDAI5D5f,KAAK6f,mBAAmBnY,QAAQ,GAAKX,EAAI/G,KAAK8f,mEAIjD9f,KAAKyJ,MACTG,MAAM5J,KAAKqY,UAAY+E,IACvB9I,UAAU,KACV3K,YACAzB,+DAIIlI,KAAK4f,kEAIL5f,KAAKyJ,MACTG,MAAM5J,KAAKqY,UAAY+E,IACvBxT,MAA+B,IAAzB5J,KAAK4f,mBACXjW,YACAzB,8DAIIlI,KAAK8f,kEAINC,EAAQhX,EAAiB3F,KAAKpD,KAAMA,WAErCggB,kBAAoBhgB,KAAKme,eAAiB4B,EAC7C,kBACC,cACD/f,KAAKigB,kBAhWE,aAoWJC,mBAAqBlgB,KAAKke,gBAAkB6B,EAC/C,kBACC,cAAe,cAChB/f,KAAKmgB,mBAxWG,QA0WRngB,KAAKggB,wBAGFI,mBAAqBpgB,KAAKie,gBAAkB8B,EAC/C,mBACC,cAAe,cAAe,cAC/B/f,KAAKqgB,mBAjXG,QAmXRrgB,KAAKkgB,yBAGFI,cAAgBP,EACnB,iBACC,SAAU,cAAe,cAAe,cACzC/f,KAAKugB,cA1XI,SA4XTvgB,KAAKogB,oBACL,QAGGI,WAAaT,EAChB,cACC,SAAU,cAAe,cAAe,cACzC/f,KAAKygB,WAnYI,SAqYTzgB,KAAKie,sBAGFyC,cAAgBX,EACnB,iBACC,SAAU,SAAU,cAAe,cAAe,cACnD/f,KAAK2gB,cA5YI,SA8YT3gB,KAAKsgB,eACL,QAGGM,WAAab,EAChB,cACC,SAAU,SAAU,cAAe,cAAe,cACnD/f,KAAK6gB,WArZI,SAuZT7gB,KAAKwgB,iBAGFM,YAAcf,EACjB,eACC,OAAQ,SAAU,SAAU,cAAe,cAAe,cAC3D/f,KAAK+gB,YA9ZE,OAgaP/gB,KAAK0gB,eACL,QAGGM,SAAWjB,EACd,YACC,OAAQ,SAAU,SAAU,cAAe,cAAe,cAC3D/f,KAAKihB,SAvaE,OAyaPjhB,KAAK4gB,iBAGFM,WAAanB,EAChB,cACC,OACD/f,KAAK4e,WAhbC,MAkbN,cACA,QAGGuC,QAAUpB,EACb,WACC,OACD/f,KAAK6e,QAzbC,YA6bHuC,YAAcrB,EACjB,eACC,QAAS,OACV/f,KAAK8e,YAjcG,QAmcR9e,KAAKkhB,YACL,QAGGG,SAAWtB,EACd,YACC,QAAS,OACV/f,KAAK+e,SA1cG,QA4cR/e,KAAKmhB,cAGFG,eAAiBvB,EACpB,kBACC,OAAQ,QAAS,OAClB/f,KAAK0e,eAndE,OAqdP1e,KAAKohB,aACL,QAGGG,YAAcxB,EACjB,eACC,OAAQ,QAAS,OAClB/f,KAAK2e,YA5dE,OA8dP3e,KAAKqhB,0CAID1F,eACDlS,MAAQlC,EAAOoU,QACf9R,kBACE8R,qCAGEA,UACF3b,KAAKwhB,QAAQ7F,qCAGZjT,OACFwO,EAAQlX,KAAKoe,MAAM1V,KAAYwO,MAAM,QACrCuK,EAAQzhB,KAAK0hB,kBACbC,EAAQ3hB,KAAK4f,kBACbgC,EAAO5hB,KAAK8f,0BACZ,QAAU/Y,EAAI0a,GAAS1a,EAAI4a,GAAS5a,EAAI6a,GACvC1K,EAAM2K,KAAK,kDAIX7hB,KAAK8hB,UAAU,yDAIf9hB,KAAK8hB,UAAU,6DAIhBH,EAAQ3hB,KAAK4f,kBACbgC,EAAO5hB,KAAK8f,wBACX9f,KAAKoe,MAAM2D,cAAcna,QAAQ,OAAQb,EAAI4a,GAAS5a,EAAI6a,qDAK1D5hB,KAAKgiB,qDAtNJ,IAAItE,GAAYrF,iDAIjB4E,GAASgF,mFAGJthB,kFACD+c,kBAAS,GAAS/c"}